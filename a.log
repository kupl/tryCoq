Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
arg34 |> string1
arg36 |> string1
arg38 |> string1
arg43 |> string1
arg45 |> string1
arg47 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
arg74 |> string1
arg76 |> string1
arg78 |> string1
arg91 |> string1
arg93 |> string1
arg95 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
arg106 |> string1
arg108 |> string1
arg110 |> string1
arg123 |> string1
arg125 |> string1
arg127 |> string1
Tactic List : 0
previous tactics
simpl in goal


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
lambda1 : lambda
string1 : string
lambda2 : lambda
string2 : string
---------------------------------------
forall (lambda3:lambda), sub_check_ta1 (lambda3) (Cons (string2) (Cons (string1) (Nil))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (lambda3) (Cons (string1) (Nil)) else sub_check (lambda3) (Cons (string2) (Cons (string1) (Nil)))

0 goal(s) more...

0 conjecture(s) more...
state_list
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
sub_check_ta1 (lambda3) (Cons (string2) (Cons (string1) (Nil))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (lambda3) (Cons (string1) (Nil)) else sub_check (lambda3) (Cons (string2) (Cons (string1) (Nil)))
sub_check_ta1 (lambda4) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (P (string3) (lambda4)) (Cons (string1) (Nil)) else sub_check (P (string3) (lambda4)) (Cons (string2) (Cons (string1) (Nil)))
lhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
rhs_common_subtree
New Env

;;
Lemma List
forall (arg1:string list) (lambda2:lambda), sub_check_ta1 (lambda2) (arg1) = sub_check (lambda2) (arg1)
End of Lemma List
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:string list) (lambda2:lambda), sub_check_ta1 (lambda2) (arg1) = sub_check (lambda2) (arg1)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 8


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg150 |> string1
arg152 |> string1
arg154 |> string1
arg159 |> string1
arg161 |> string1
arg163 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 9


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg166 |> string1
arg168 |> string1
arg170 |> string1
arg175 |> string1
arg177 |> string1
arg179 |> string1
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 10


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

3 goal(s) more...

1 conjecture(s) more...
arg182 |> string1
arg184 |> string1
arg186 |> string1
arg191 |> string1
arg193 |> string1
arg195 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 11


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 12


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
arg222 |> string2
arg224 |> string2
arg226 |> string1
arg228 |> string1
arg239 |> string2
arg241 |> string2
arg243 |> string1
arg245 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 13


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
arg254 |> string1
arg256 |> string2
arg258 |> string1
arg260 |> string1
arg271 |> string1
arg273 |> string2
arg275 |> string1
arg277 |> string1
Tactic List : 3
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 14


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
arg286 |> string1
arg288 |> string2
arg290 |> string1
arg292 |> string1
arg303 |> string1
arg305 |> string2
arg307 |> string1
arg309 |> string1
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 15


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
arg322 |> string1
arg324 |> string1
arg326 |> string1
arg343 |> string1
arg345 |> string1
arg347 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 16


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg362 |> string1
arg364 |> string1
arg366 |> string1
arg368 |> string1
arg383 |> string1
arg385 |> string1
arg387 |> string1
arg389 |> string1
Tactic List : 5
intro string_list1(rank:1)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 17


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg402 |> string1
arg404 |> string1
arg406 |> string1
arg408 |> string1
arg423 |> string1
arg425 |> string1
arg427 |> string1
arg429 |> string1
Tactic List : 5
rewrite IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 18


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg442 |> string1
arg444 |> string1
arg446 |> string1
arg448 |> string1
arg463 |> string1
arg465 |> string1
arg467 |> string1
arg469 |> string1
Tactic List : 1
rewrite <- IH1 in goal at 2(rank:2)
=================================================
Progress: 19


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg482 |> string1
arg484 |> string1
arg486 |> string1
arg488 |> string1
arg503 |> string1
arg505 |> string1
arg507 |> string1
arg509 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (arg2:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg2 = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else arg2
End of Lemma List
=================================================
Progress: 20


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg2:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg2 = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else arg2(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
arg519 |> string1
arg521 |> string1
arg528 |> string1
arg530 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 21


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (bool1:bool) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1

2 goal(s) more...

2 conjecture(s) more...
arg535 |> string2
arg537 |> string1
arg539 |> string2
arg544 |> string2
arg546 |> string1
arg548 |> string2
Tactic List : 0
previous tactics
state_list
New Env

;;
Lemma List
forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1
End of Lemma List
=================================================
Progress: 22


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1(rank : 0)


1st goal of : forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1

0 goal(s) more...

3 conjecture(s) more...
arg559 |> string2
arg561 |> string1
arg563 |> string2
arg568 |> string2
arg570 |> string1
arg572 |> string2
Tactic List : 0
state_list
=================================================
Progress: 23


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg587 |> string1
arg589 |> string1
arg591 |> string1
arg593 |> string1
arg608 |> string1
arg610 |> string1
arg612 |> string1
arg614 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 1


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (arg3:string list) (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (arg3) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (arg3)
End of Lemma List
=================================================
Progress: 24


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg3:string list) (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (arg3) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (arg3)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
arg624 |> string1
arg626 |> string1
arg633 |> string1
arg635 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 25


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string_list2:string list), sub_check_ta1 (V (string2)) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg640 |> string2
arg642 |> string2
arg644 |> string1
arg646 |> string2
arg649 |> string2
arg651 |> string2
arg653 |> string1
arg655 |> string2
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 26


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string_list2:string list), sub_check_ta1 (V (string2)) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string_list2:string list), is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg656 |> string2
arg658 |> string2
arg660 |> string1
arg662 |> string2
arg665 |> string2
arg667 |> string2
arg669 |> string1
arg671 |> string2
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 27


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list) (string1:string) (string_list2:string list), is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (Nil) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)

3 goal(s) more...

2 conjecture(s) more...
arg672 |> string2
arg674 |> string2
arg676 |> string1
arg678 |> string2
arg681 |> string2
arg683 |> string2
arg685 |> string1
arg687 |> string2
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 28


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (Nil) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string_list2:string list), false = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)

3 goal(s) more...

2 conjecture(s) more...
arg688 |> string2
arg690 |> string1
arg692 |> string2
arg694 |> string2
arg697 |> string2
arg699 |> string1
arg701 |> string2
arg703 |> string2
Tactic List : 0
previous tactics
simpl in goal
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string_list2:string list), false = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)
End of Lemma List
=================================================
Progress: 29


1st goal of : forall (string_list1:string list) (lambda1:lambda) (string1:string) (string_list2:string list), sub_check_ta1 (lambda1) (string_list1) = if mem (string1) (string_list2) then sub_check_ta1 (lambda1) (string_list2) else sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string_list2:string list), is_mem_ta1 (Nil) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string_list2:string list), false = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Nil)(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string_list1:string list), false = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Nil)

---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), false = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Nil)

0 goal(s) more...

3 conjecture(s) more...
arg710 |> string2
arg712 |> string1
arg714 |> string2
arg716 |> string2
arg719 |> string2
arg721 |> string1
arg723 |> string2
arg725 |> string2
Tactic List : 0
state_list
=================================================
Progress: 30


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg738 |> string1
arg740 |> string1
arg742 |> string1
arg744 |> string1
arg759 |> string1
arg761 |> string1
arg763 |> string1
arg765 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 2


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (arg4:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg4 = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else arg4
End of Lemma List
=================================================
Progress: 31


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg4:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg4 = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else arg4(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
arg775 |> string1
arg777 |> string1
arg784 |> string1
arg786 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 32


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (bool1:bool) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1

2 goal(s) more...

2 conjecture(s) more...
arg791 |> string2
arg793 |> string1
arg795 |> string2
arg800 |> string2
arg802 |> string1
arg804 |> string2
Tactic List : 0
previous tactics
state_list
New Env

;;
Lemma List
forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1
End of Lemma List
=================================================
Progress: 33


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1(rank : 0)


1st goal of : forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (string1:string) (string2:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1

0 goal(s) more...

3 conjecture(s) more...
arg815 |> string2
arg817 |> string1
arg819 |> string2
arg824 |> string2
arg826 |> string1
arg828 |> string2
Tactic List : 0
state_list
=================================================
Progress: 34


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg843 |> string1
arg845 |> string1
arg847 |> string1
arg849 |> string1
arg864 |> string1
arg866 |> string1
arg868 |> string1
arg870 |> string1
Tactic List : 2
rewrite <- IH1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 35


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg883 |> string1
arg885 |> string1
arg887 |> string1
arg889 |> string1
arg904 |> string1
arg906 |> string1
arg908 |> string1
arg910 |> string1
Tactic List : 1
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 36


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg931 |> string1
arg933 |> string1
arg960 |> string1
arg962 |> string1
Tactic List : 3
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 37


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg979 |> string1
arg981 |> string1
arg983 |> string1
arg985 |> string1
arg1000 |> string1
arg1002 |> string1
arg1004 |> string1
arg1006 |> string1
Tactic List : 1
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 38


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg1027 |> string1
arg1029 |> string1
arg1056 |> string1
arg1058 |> string1
Tactic List : 2
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 1(rank:2)
=================================================
Progress: 39


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg1075 |> string1
arg1077 |> string1
arg1079 |> string1
arg1081 |> string1
arg1096 |> string1
arg1098 |> string1
arg1100 |> string1
arg1102 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite <- IH1 in goal at 2


1st goal of : any
lambda1 : lambda
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (arg5:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg5 = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else arg5
End of Lemma List
=================================================
Progress: 40


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg5:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg5 = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else arg5(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
arg1111 |> string1
arg1113 |> string1
arg1120 |> string1
arg1122 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 41


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else bool1
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (bool1:bool) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else bool1

2 goal(s) more...

2 conjecture(s) more...
arg1127 |> string2
arg1129 |> string1
arg1131 |> string2
arg1136 |> string2
arg1138 |> string1
arg1140 |> string2
Tactic List : 0
=================================================
Progress: 42


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg1163 |> string1
arg1165 |> string1
arg1192 |> string1
arg1194 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
case mem (string1) (string_list1)


1st goal of : any
lambda1 : lambda
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda2:lambda), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)
End of Lemma List
=================================================
Progress: 43


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
arg1205 |> string1
arg1207 |> string1
arg1209 |> string1
arg1214 |> string1
arg1216 |> string1
arg1218 |> string1
Tactic List : 2
induction lambda1(rank:0)
induction string_list1(rank:0)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg1221 |> string2
arg1223 |> string1
arg1225 |> string2
arg1227 |> string1
arg1230 |> string2
arg1232 |> string1
arg1234 |> string2
arg1236 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
arg1237 |> string1
arg1239 |> string1
arg1241 |> string1
arg1246 |> string1
arg1248 |> string1
arg1250 |> string1
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg1269 |> string2
arg1271 |> string1
arg1273 |> string2
arg1275 |> string1
arg1294 |> string2
arg1296 |> string1
arg1298 |> string2
arg1300 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
arg1317 |> string2
arg1319 |> string2
arg1321 |> string1
arg1323 |> string1
arg1342 |> string2
arg1344 |> string2
arg1346 |> string1
arg1348 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
arg1365 |> string2
arg1367 |> string2
arg1369 |> string1
arg1371 |> string1
arg1390 |> string2
arg1392 |> string2
arg1394 |> string1
arg1396 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg1397 |> string2
arg1399 |> string1
arg1401 |> string1
arg1403 |> string2
arg1406 |> string2
arg1408 |> string1
arg1410 |> string1
arg1412 |> string2
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check_ta1 (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1429 |> string3
arg1431 |> string2
arg1433 |> string1
arg1435 |> string1
arg1454 |> string3
arg1456 |> string2
arg1458 |> string1
arg1460 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
arg1461 |> string2
arg1463 |> string1
arg1465 |> string1
arg1467 |> string2
arg1470 |> string2
arg1472 |> string1
arg1474 |> string1
arg1476 |> string2
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = mem (string2) (Cons (string3) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg1489 |> string3
arg1491 |> string1
arg1493 |> string3
arg1495 |> string1
arg1510 |> string3
arg1512 |> string1
arg1514 |> string3
arg1516 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = mem (string2) (Cons (string3) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1529 |> string2
arg1531 |> string3
arg1533 |> string1
arg1535 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg1550 |> string2
arg1552 |> string3
arg1554 |> string1
arg1556 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1573 |> string3
arg1575 |> string2
arg1577 |> string1
arg1579 |> string1
arg1598 |> string3
arg1600 |> string2
arg1602 |> string1
arg1604 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1617 |> string2
arg1619 |> string3
arg1621 |> string1
arg1623 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg1638 |> string2
arg1640 |> string3
arg1642 |> string1
arg1644 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1669 |> string3
arg1671 |> string1
arg1673 |> string3
arg1675 |> string2
arg1702 |> string3
arg1704 |> string1
arg1706 |> string3
arg1708 |> string2
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg1729 |> string2
arg1731 |> string1
arg1733 |> string2
arg1735 |> string3
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg1758 |> string2
arg1760 |> string1
arg1762 |> string2
arg1764 |> string3
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 58


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg1777 |> string1
arg1779 |> string1
arg1781 |> string1
arg1783 |> string1
arg1798 |> string1
arg1800 |> string1
arg1802 |> string1
arg1804 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite IH1 in goal at 0
rewrite <- IH1 in goal at 2


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (arg6:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg6 = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else arg6
End of Lemma List
=================================================
Progress: 59


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (arg6:bool) (lambda2:lambda) (string1:string) (string_list1:string list), arg6 = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else arg6(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
arg1814 |> string1
arg1816 |> string1
arg1823 |> string1
arg1825 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 60


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

---------------------------------------
forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (bool1:bool) (lambda1:lambda) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else bool1
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (bool1:bool) (string1:string) (string_list1:string list), bool1 = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else bool1

2 goal(s) more...

2 conjecture(s) more...
arg1830 |> string2
arg1832 |> string1
arg1834 |> string2
arg1839 |> string2
arg1841 |> string1
arg1843 |> string2
Tactic List : 0
=================================================
Progress: 61


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
arg1858 |> string1
arg1860 |> string1
arg1862 |> string1
arg1864 |> string1
arg1879 |> string1
arg1881 |> string1
arg1883 |> string1
arg1885 |> string1
Tactic List : 1
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 62


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg1906 |> string1
arg1908 |> string1
arg1935 |> string1
arg1937 |> string1
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 63


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg1962 |> string1
arg1964 |> string1
arg1991 |> string1
arg1993 |> string1
Tactic List : 1
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 64


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg2018 |> string1
arg2020 |> string1
arg2047 |> string1
arg2049 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite IH1 in goal at 0
case mem (string1) (string_list1)


1st goal of : any
lambda1 : lambda
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda2:lambda), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)
End of Lemma List
=================================================
Progress: 65


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
arg2060 |> string1
arg2062 |> string1
arg2064 |> string1
arg2069 |> string1
arg2071 |> string1
arg2073 |> string1
Tactic List : 2
induction lambda1(rank:0)
induction string_list1(rank:0)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (V (string2)) (Cons (string1) (string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg2076 |> string2
arg2078 |> string1
arg2080 |> string2
arg2082 |> string1
arg2085 |> string2
arg2087 |> string1
arg2089 |> string2
arg2091 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
arg2092 |> string1
arg2094 |> string1
arg2096 |> string1
arg2101 |> string1
arg2103 |> string1
arg2105 |> string1
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg2124 |> string2
arg2126 |> string1
arg2128 |> string2
arg2130 |> string1
arg2149 |> string2
arg2151 |> string1
arg2153 |> string2
arg2155 |> string1
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
arg2172 |> string2
arg2174 |> string2
arg2176 |> string1
arg2178 |> string1
arg2197 |> string2
arg2199 |> string2
arg2201 |> string1
arg2203 |> string1
Tactic List : 2
induction lambda1(rank:0)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
arg2220 |> string2
arg2222 |> string2
arg2224 |> string1
arg2226 |> string1
arg2245 |> string2
arg2247 |> string2
arg2249 |> string1
arg2251 |> string1
Tactic List : 2
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (V (string2)) (Cons (string1) (string_list1)) = sub_check (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg2252 |> string2
arg2254 |> string1
arg2256 |> string1
arg2258 |> string2
arg2261 |> string2
arg2263 |> string1
arg2265 |> string1
arg2267 |> string2
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2284 |> string3
arg2286 |> string2
arg2288 |> string1
arg2290 |> string1
arg2309 |> string3
arg2311 |> string2
arg2313 |> string1
arg2315 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list1) = mem (string2) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) = mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
arg2316 |> string2
arg2318 |> string1
arg2320 |> string1
arg2322 |> string2
arg2325 |> string2
arg2327 |> string1
arg2329 |> string1
arg2331 |> string2
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) = mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = mem (string2) (Cons (string3) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg2344 |> string3
arg2346 |> string1
arg2348 |> string3
arg2350 |> string1
arg2365 |> string3
arg2367 |> string1
arg2369 |> string3
arg2371 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = mem (string2) (Cons (string3) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2384 |> string2
arg2386 |> string3
arg2388 |> string1
arg2390 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg2405 |> string2
arg2407 |> string3
arg2409 |> string1
arg2411 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2428 |> string3
arg2430 |> string2
arg2432 |> string1
arg2434 |> string1
arg2453 |> string3
arg2455 |> string2
arg2457 |> string1
arg2459 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2472 |> string2
arg2474 |> string3
arg2476 |> string1
arg2478 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg2493 |> string2
arg2495 |> string3
arg2497 |> string1
arg2499 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2524 |> string3
arg2526 |> string1
arg2528 |> string3
arg2530 |> string3
arg2557 |> string3
arg2559 |> string1
arg2561 |> string3
arg2563 |> string3
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg2584 |> string2
arg2586 |> string1
arg2588 |> string2
arg2590 |> string2
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg2613 |> string2
arg2615 |> string1
arg2617 |> string2
arg2619 |> string2
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 80


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg2640 |> string1
arg2642 |> string1
arg2669 |> string1
arg2671 |> string1
Tactic List : 0
=================================================
Progress: 81


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg2696 |> string1
arg2698 |> string1
arg2725 |> string1
arg2727 |> string1
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
intro string_list1
rewrite <- IH1 in goal at 0
case mem (string1) (string_list1)
rewrite IH1 in goal at 1


1st goal of : any
lambda1 : lambda
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda2:lambda), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)
End of Lemma List
=================================================
Progress: 82


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
arg2738 |> string1
arg2740 |> string1
arg2742 |> string1
arg2747 |> string1
arg2749 |> string1
arg2751 |> string1
Tactic List : 2
induction lambda1(rank:0)
induction string_list1(rank:0)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (V (string2)) (Cons (string1) (string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
arg2754 |> string2
arg2756 |> string1
arg2758 |> string2
arg2760 |> string1
arg2763 |> string2
arg2765 |> string1
arg2767 |> string2
arg2769 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Nil)) = sub_check_ta1 (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
arg2770 |> string1
arg2772 |> string1
arg2774 |> string1
arg2779 |> string1
arg2781 |> string1
arg2783 |> string1
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Nil)) = sub_check_ta1 (lambda1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg2802 |> string2
arg2804 |> string1
arg2806 |> string2
arg2808 |> string1
arg2827 |> string2
arg2829 |> string1
arg2831 |> string2
arg2833 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
arg2850 |> string2
arg2852 |> string2
arg2854 |> string1
arg2856 |> string1
arg2875 |> string2
arg2877 |> string2
arg2879 |> string1
arg2881 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
arg2898 |> string2
arg2900 |> string2
arg2902 |> string1
arg2904 |> string1
arg2923 |> string2
arg2925 |> string2
arg2927 |> string1
arg2929 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (V (string2)) (Cons (string1) (string_list1)) = sub_check_ta1 (V (string2)) (string_list1)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
arg2930 |> string2
arg2932 |> string1
arg2934 |> string1
arg2936 |> string2
arg2939 |> string2
arg2941 |> string1
arg2943 |> string1
arg2945 |> string2
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check_ta1 (V (string3)) (Cons (string2) (string_list2))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string3)

2 goal(s) more...

2 conjecture(s) more...
arg2962 |> string3
arg2964 |> string2
arg2966 |> string1
arg2968 |> string1
arg2987 |> string3
arg2989 |> string2
arg2991 |> string1
arg2993 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list1) = is_mem_ta1 (string_list1) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) = is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
arg2994 |> string2
arg2996 |> string1
arg2998 |> string1
arg3000 |> string2
arg3003 |> string2
arg3005 |> string1
arg3007 |> string1
arg3009 |> string2
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), mem (string1) (Nil) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) = is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
arg3022 |> string2
arg3024 |> string1
arg3026 |> string3
arg3028 |> string1
arg3043 |> string2
arg3045 |> string1
arg3047 |> string3
arg3049 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), mem (string1) (Cons (string3) (string_list2)) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = is_mem_ta1 (Cons (string3) (string_list2)) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

2 conjecture(s) more...
arg3062 |> string2
arg3064 |> string3
arg3066 |> string1
arg3068 |> string1
string2 |> string2
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
arg3083 |> string2
arg3085 |> string3
arg3087 |> string1
arg3089 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string3)

2 goal(s) more...

2 conjecture(s) more...
arg3106 |> string3
arg3108 |> string2
arg3110 |> string1
arg3112 |> string1
arg3131 |> string3
arg3133 |> string2
arg3135 |> string1
arg3137 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

2 conjecture(s) more...
arg3150 |> string2
arg3152 |> string3
arg3154 |> string1
arg3156 |> string1
string2 |> string2
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
arg3171 |> string2
arg3173 |> string3
arg3175 |> string1
arg3177 |> string1
Tactic List : 4
intro Cond1(rank:1)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string3)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check_ta1 (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string3)

2 goal(s) more...

2 conjecture(s) more...
arg3202 |> string3
arg3204 |> string1
arg3206 |> string3
arg3208 |> string3
arg3235 |> string3
arg3237 |> string1
arg3239 |> string3
arg3241 |> string3
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2) = is_mem_ta1 (string_list2) (string2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Cons (string3) (string_list2)) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

2 goal(s) more...

2 conjecture(s) more...
arg3262 |> string2
arg3264 |> string1
arg3266 |> string2
arg3268 |> string2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
arg3291 |> string2
arg3293 |> string1
arg3295 |> string2
arg3297 |> string2
Tactic List : 5
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 97


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg3318 |> string1
arg3320 |> string1
arg3347 |> string1
arg3349 |> string1
Tactic List : 0
=================================================
Progress: 98


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg3374 |> string1
arg3376 |> string1
arg3403 |> string1
arg3405 |> string1
Tactic List : 0
=================================================
Progress: 99


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg3430 |> string1
arg3432 |> string1
arg3459 |> string1
arg3461 |> string1
Tactic List : 0
=================================================
Progress: 100


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check_ta1 (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
Case1 : mem (string1) (string_list1) = true
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = sub_check (lambda2) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
arg3486 |> string1
arg3488 |> string1
arg3515 |> string1
arg3517 |> string1
Tactic List : 0
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
arg3538 |> string2
arg3540 |> string1
arg3542 |> string2
arg3544 |> string1
string_list2 |> string_list2
arg3546 |> lambda1
string_list2 |> string_list2
arg3548 |> lambda1
arg3563 |> string2
arg3565 |> string1
arg3567 |> string2
arg3569 |> string1
Tactic List : 0
previous tactics
rewrite IH1 in goal at 0


1st goal of : any
string_list1 : string list
string2 : string
---------------------------------------
forall (string_list2:string list) (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda1:lambda) (string1:string) (string2:string) (string_list2:string list), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)
End of Lemma List
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> assert forall (lambda1:lambda) (string1:string) (string2:string) (string_list2:string list), mem (string1) (Cons (string2) (string_list2)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
arg3580 |> string2
arg3582 |> string1
arg3584 |> string2
arg3586 |> string1
arg3589 |> string2
arg3591 |> string1
arg3593 |> string2
arg3595 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
arg3596 |> string2
arg3598 |> string2
arg3600 |> string1
arg3602 |> string1
arg3605 |> string2
arg3607 |> string2
arg3609 |> string1
arg3611 |> string1
Tactic List : 2
induction lambda1(rank:0)
induction string_list1(rank:0)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (V (string3)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
arg3612 |> string3
arg3614 |> string2
arg3616 |> string1
arg3618 |> string1
arg3621 |> string3
arg3623 |> string2
arg3625 |> string1
arg3627 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (Nil))) = sub_check (lambda1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
arg3628 |> string2
arg3630 |> string2
arg3632 |> string1
arg3634 |> string1
arg3637 |> string2
arg3639 |> string2
arg3641 |> string1
arg3643 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (lambda1:lambda) (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (Nil))) = sub_check (lambda1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
lambda1 : lambda
string3 : string
Base2 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (Nil))) = sub_check (V (string3)) (Nil)

3 goal(s) more...

3 conjecture(s) more...
arg3644 |> string3
arg3646 |> string2
arg3648 |> string1
arg3650 |> string1
arg3653 |> string3
arg3655 |> string2
arg3657 |> string1
arg3659 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (V (string3)) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list1)) = mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
arg3660 |> string3
arg3662 |> string2
arg3664 |> string1
arg3666 |> string1
arg3669 |> string3
arg3671 |> string2
arg3673 |> string1
arg3675 |> string1
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string) (string_list1:string list), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list1) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list1)) = mem (string3) (string_list1)

2 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = mem (string3) (Nil)

3 goal(s) more...

3 conjecture(s) more...
arg3676 |> string3
arg3678 |> string2
arg3680 |> string1
arg3682 |> string1
arg3685 |> string3
arg3687 |> string2
arg3689 |> string1
arg3691 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
lambda1 : lambda
string3 : string
Base2 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (Nil))) = sub_check (V (string3)) (Nil)

3 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
lambda1 : lambda
string3 : string
Base2 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false

3 goal(s) more...

3 conjecture(s) more...
arg3692 |> string2
arg3694 |> string2
arg3696 |> string1
arg3698 |> string1
arg3701 |> string2
arg3703 |> string2
arg3705 |> string1
arg3707 |> string1
Tactic List : 0
previous tactics
simpl in goal
state_list
New Env

;;
Lemma List
forall (string1:string) (string2:string) (string3:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false
End of Lemma List
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = mem (string3) (Nil)

3 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false

3 goal(s) more...

3 conjecture(s) more...
arg3714 |> string2
arg3716 |> string2
arg3718 |> string1
arg3720 |> string1
arg3723 |> string2
arg3725 |> string2
arg3727 |> string1
arg3729 |> string1
Tactic List : 0
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string) (string_list1:string list), mem (string1) (Cons (string2) (string_list1)) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list1))) = sub_check (lambda1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
lambda1 : lambda
string3 : string
Base2 : lambda1 = V (string3)
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (Nil))) = sub_check (V (string3)) (Nil)

3 goal(s) more...

3 conjecture(s) more...
>>> assert forall (string1:string) (string2:string) (string3:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false(rank : 0)


1st goal of : forall (string1:string) (string2:string) (string3:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false

---------------------------------------
forall (string1:string) (string2:string) (string3:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (Nil) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (Nil)) = false

0 goal(s) more...

4 conjecture(s) more...
arg3730 |> string2
arg3732 |> string2
arg3734 |> string1
arg3736 |> string1
arg3739 |> string2
arg3741 |> string2
arg3743 |> string1
arg3745 |> string1
Tactic List : 0
state_list
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
arg3762 |> string2
arg3764 |> string2
arg3766 |> string1
arg3768 |> string1
string_list2 |> string_list2
arg3770 |> lambda1
string_list2 |> string_list2
arg3772 |> lambda1
arg3787 |> string2
arg3789 |> string2
arg3791 |> string1
arg3793 |> string1
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (lambda1:lambda) (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (lambda1) (string_list2)

1 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg3810 |> string3
arg3812 |> string2
arg3814 |> string1
arg3816 |> string1
string_list2 |> string_list2
arg3818 |> V (string3)
string_list2 |> string_list2
arg3820 |> V (string3)
arg3835 |> string3
arg3837 |> string2
arg3839 |> string1
arg3841 |> string1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> sub_check (V (string3)) (Cons (string1) (Cons (string2) (string_list2))) = sub_check (V (string3)) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg3858 |> string3
arg3860 |> string2
arg3862 |> string1
arg3864 |> string1
arg3883 |> string3
arg3885 |> string2
arg3887 |> string1
arg3889 |> string1
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg3906 |> string3
arg3908 |> string2
arg3910 |> string1
arg3912 |> string1
arg3931 |> string3
arg3933 |> string2
arg3935 |> string1
arg3937 |> string1
Tactic List : 3
intro Cond1(rank:1)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string2) (string_list2)) = mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg3962 |> string3
arg3964 |> string1
arg3966 |> string3
arg3968 |> string3
arg3995 |> string3
arg3997 |> string1
arg3999 |> string3
arg4001 |> string3
Tactic List : 2
rewrite <- Cond1 in goal at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> true = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4026 |> string3
arg4028 |> string2
arg4030 |> string1
arg4032 |> string1
arg4059 |> string3
arg4061 |> string2
arg4063 |> string1
arg4065 |> string1
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> true = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4098 |> string3
arg4100 |> string2
arg4102 |> string3
arg4104 |> string3
arg4139 |> string3
arg4141 |> string2
arg4143 |> string3
arg4145 |> string3
Tactic List : 6
rewrite <- Cond1 in goal at 1(rank:1)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4178 |> string3
arg4180 |> string2
arg4182 |> string1
arg4184 |> string1
arg4219 |> string3
arg4221 |> string2
arg4223 |> string1
arg4225 |> string1
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4250 |> string3
arg4252 |> string1
arg4254 |> string3
arg4256 |> string2
arg4283 |> string3
arg4285 |> string1
arg4287 |> string3
arg4289 |> string2
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : true = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4322 |> string3
arg4324 |> string1
arg4326 |> string3
arg4328 |> string2
arg4363 |> string3
arg4365 |> string1
arg4367 |> string3
arg4369 |> string2
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
arg4394 |> string3
arg4396 |> string2
arg4398 |> string1
arg4400 |> string1
arg4427 |> string3
arg4429 |> string2
arg4431 |> string1
arg4433 |> string1
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
arg4466 |> string3
arg4468 |> string1
arg4470 |> string3
arg4472 |> string2
arg4507 |> string3
arg4509 |> string1
arg4511 |> string3
arg4513 |> string2
Tactic List : 6
rewrite <- Cond1 in goal at 2(rank:1)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4546 |> string1
arg4548 |> string1
arg4550 |> string3
arg4552 |> string2
arg4587 |> string1
arg4589 |> string1
arg4591 |> string3
arg4593 |> string2
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4614 |> string2
arg4616 |> string3
arg4618 |> string1
arg4620 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg4643 |> string2
arg4645 |> string3
arg4647 |> string1
arg4649 |> string1
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4678 |> string2
arg4680 |> string3
arg4682 |> string2
arg4684 |> string2
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg4715 |> string2
arg4717 |> string3
arg4719 |> string2
arg4721 |> string2
Tactic List : 6
rewrite <- Cond1 in goal at 1(rank:1)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4750 |> string2
arg4752 |> string3
arg4754 |> string1
arg4756 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg4787 |> string2
arg4789 |> string3
arg4791 |> string1
arg4793 |> string1
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4814 |> string2
arg4816 |> string1
arg4818 |> string2
arg4820 |> string3
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg4843 |> string2
arg4845 |> string1
arg4847 |> string2
arg4849 |> string3
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : true = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg4878 |> string2
arg4880 |> string1
arg4882 |> string2
arg4884 |> string3
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg4915 |> string2
arg4917 |> string1
arg4919 |> string2
arg4921 |> string3
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
arg4942 |> string2
arg4944 |> string3
arg4946 |> string1
arg4948 |> string1
arg4971 |> string2
arg4973 |> string3
arg4975 |> string1
arg4977 |> string1
Tactic List : 5
intro Cond1(rank:1)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
arg5006 |> string2
arg5008 |> string1
arg5010 |> string2
arg5012 |> string3
arg5043 |> string2
arg5045 |> string1
arg5047 |> string2
arg5049 |> string3
Tactic List : 6
rewrite <- Cond1 in goal at 2(rank:1)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5078 |> string1
arg5080 |> string1
arg5082 |> string2
arg5084 |> string3
arg5115 |> string1
arg5117 |> string1
arg5119 |> string2
arg5121 |> string3
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg5146 |> string3
arg5148 |> string1
arg5150 |> string3
arg5152 |> string2
arg5179 |> string3
arg5181 |> string1
arg5183 |> string3
arg5185 |> string2
Tactic List : 2
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5218 |> string3
arg5220 |> string2
arg5222 |> string1
arg5224 |> string1
arg5259 |> string3
arg5261 |> string2
arg5263 |> string1
arg5265 |> string1
Tactic List : 10
rewrite Cond1 in goal at 2(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5298 |> string1
arg5300 |> string1
arg5302 |> string3
arg5304 |> string2
arg5339 |> string1
arg5341 |> string1
arg5343 |> string3
arg5345 |> string2
Tactic List : 10
rewrite Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 2(rank:1)
rewrite Cond1 in goal at 2(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5378 |> string3
arg5380 |> string2
arg5382 |> string1
arg5384 |> string1
arg5419 |> string3
arg5421 |> string2
arg5423 |> string1
arg5425 |> string1
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5458 |> string3
arg5460 |> string2
arg5462 |> string1
arg5464 |> string2
arg5499 |> string3
arg5501 |> string2
arg5503 |> string1
arg5505 |> string2
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5538 |> string1
arg5540 |> string1
arg5542 |> string3
arg5544 |> string2
arg5579 |> string1
arg5581 |> string1
arg5583 |> string3
arg5585 |> string2
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5618 |> string1
arg5620 |> string1
arg5622 |> string3
arg5624 |> string2
arg5659 |> string1
arg5661 |> string1
arg5663 |> string3
arg5665 |> string2
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg5690 |> string3
arg5692 |> string1
arg5694 |> string3
arg5696 |> string2
arg5723 |> string3
arg5725 |> string1
arg5727 |> string3
arg5729 |> string2
Tactic List : 1
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5762 |> string3
arg5764 |> string2
arg5766 |> string1
arg5768 |> string1
arg5803 |> string3
arg5805 |> string2
arg5807 |> string1
arg5809 |> string1
Tactic List : 7
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 2(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg5834 |> string3
arg5836 |> string1
arg5838 |> string3
arg5840 |> string2
arg5867 |> string3
arg5869 |> string1
arg5871 |> string3
arg5873 |> string2
Tactic List : 1
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5906 |> string1
arg5908 |> string1
arg5910 |> string3
arg5912 |> string2
arg5947 |> string1
arg5949 |> string1
arg5951 |> string3
arg5953 |> string2
Tactic List : 7
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg5986 |> string3
arg5988 |> string2
arg5990 |> string3
arg5992 |> string3
arg6027 |> string3
arg6029 |> string2
arg6031 |> string3
arg6033 |> string3
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (lambda1:lambda) (string1:string), mem (string1) (string_list2) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list2)) = sub_check (lambda1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
lambda1 : lambda
string3 : string
Base1 : lambda1 = V (string3)
string1 : string
Cond1 : if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string2) (string_list2)) (string3) = true

3 goal(s) more...

2 conjecture(s) more...
arg6066 |> string3
arg6068 |> string1
arg6070 |> string3
arg6072 |> string2
arg6107 |> string3
arg6109 |> string1
arg6111 |> string3
arg6113 |> string2
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
arg6134 |> string2
arg6136 |> string1
arg6138 |> string2
arg6140 |> string3
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg6163 |> string2
arg6165 |> string1
arg6167 |> string2
arg6169 |> string3
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg6198 |> string2
arg6200 |> string3
arg6202 |> string1
arg6204 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg6235 |> string2
arg6237 |> string3
arg6239 |> string1
arg6241 |> string1
Tactic List : 10
rewrite Cond1 in goal at 2(rank:1)
rewrite <- Cond1 in goal at 1(rank:1)
rewrite Cond1 in goal at 0(rank:2)
rewrite Cond1 in goal at 1(rank:2)
rewrite <- Cond1 in goal at 2(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg6270 |> string1
arg6272 |> string1
arg6274 |> string2
arg6276 |> string3
arg6307 |> string1
arg6309 |> string1
arg6311 |> string2
arg6313 |> string3
Tactic List : 10
rewrite Cond1 in goal at 1(rank:1)
rewrite <- Cond1 in goal at 2(rank:1)
rewrite Cond1 in goal at 2(rank:2)
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- Cond1 in goal at 0(rank:2)
rewrite <- Cond1 in goal at 1(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
rewrite Cond1 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg6342 |> string2
arg6344 |> string3
arg6346 |> string1
arg6348 |> string1
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg6379 |> string2
arg6381 |> string3
arg6383 |> string1
arg6385 |> string1
Tactic List : 4
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string1) (string_list2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
arg6414 |> string2
arg6416 |> string3
arg6418 |> string1
arg6420 |> string3
string_list2 |> string_list2
string2 |> string2
string_list2 |> string_list2
string2 |> string2
arg6451 |> string2
arg6453 |> string3
arg6455 |> string1
arg6457 |> string3
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:2)
rewrite <- string_eqb_eq in Case1 at 0(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite Cond1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), mem (string1) (string_list1) = true -> sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), mem (string1) (string_list2) = true -> if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = mem (string2) (string_list2)
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Cond1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case1 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
