Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 2


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = sub_check (l) (Nil)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 3


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = sub_check (l) (Nil)

0 goal(s) more...

0 conjecture(s) more...
>>> induction l(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 4


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = sub_check (P (string4) (lambda5)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = sub_check (P (string4) (lambda5)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (lambda5) (Cons (string4) (Nil)) = sub_check (lambda5) (Cons (string4) (Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 7


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> intro l(rank : 1)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
l : lambda
---------------------------------------
check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 8


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
l : lambda
---------------------------------------
check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
l : lambda
---------------------------------------
sub_check_ta1 (l) (Nil) = sub_check (l) (Nil)

0 goal(s) more...

0 conjecture(s) more...
sub_check_ta1 (lambda19) (Nil) = sub_check (lambda19) (Nil)
sub_check_ta1 (lambda15) (Nil) = sub_check (lambda15) (Nil)
sub_check_ta1 (lambda11) (Nil) = sub_check (lambda11) (Nil)
sub_check_ta1 (lambda14) (Cons (string13) (Nil)) = sub_check (lambda14) (Cons (string13) (Nil))
sub_check_ta1 (lambda15) (Nil) = sub_check (lambda15) (Nil)
sub_check_ta1 (lambda11) (Nil) = sub_check (lambda11) (Nil)
sub_check_ta1 (lambda15) (Cons (string9) (Nil)) = sub_check (lambda15) (Cons (string9) (Nil))
sub_check_ta1 (lambda10) (Cons (string9) (Nil)) = sub_check (lambda10) (Cons (string9) (Nil))
sub_check_ta1 (lambda11) (Nil) = sub_check (lambda11) (Nil)
sub_check_ta1 (lambda10) (Cons (string9) (Cons (string9) (Nil))) = sub_check (lambda10) (Cons (string9) (Nil))
sub_check_ta1 (lambda10) (Cons (string9) (Nil)) = sub_check (lambda10) (Cons (string9) (Nil))
sub_check_ta1 (lambda11) (Nil) = sub_check (lambda11) (Nil)
sub_check_ta1 (lambda15) (Cons (string5) (Nil)) = sub_check (lambda15) (Cons (string5) (Nil))
sub_check_ta1 (lambda11) (Cons (string5) (Nil)) = sub_check (lambda11) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Nil)) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda10) (Cons (string9) (Cons (string5) (Nil))) = sub_check_ta1 (lambda10) (Cons (string5) (Nil))
sub_check_ta1 (lambda11) (Cons (string5) (Nil)) = sub_check (lambda11) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Nil)) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda13) (Cons (string5) (Cons (string5) (Nil))) = sub_check (lambda13) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Cons (string5) (Nil))) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Nil)) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda8) (Cons (string7) (Cons (string5) (Cons (string5) (Nil)))) = sub_check (lambda8) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Cons (string5) (Nil))) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Nil)) = sub_check (lambda6) (Cons (string5) (Nil))
if match (string5, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string3) = match (string5, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)
sub_check_ta1 (lambda6) (Cons (string5) (Cons (string5) (Nil))) = sub_check (lambda6) (Cons (string5) (Nil))
sub_check_ta1 (lambda6) (Cons (string5) (Nil)) = sub_check (lambda6) (Cons (string5) (Nil))
