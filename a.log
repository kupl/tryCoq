Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
((TypeDecl lambda()(((Constructor V)((Talgebraic string())))((Constructor P)((Talgebraic string())(Talgebraic lambda())))((Constructor C)((Talgebraic lambda())(Talgebraic lambda())))))(NonRec aux(al x)((desc(Call mem(((desc(Var x))(typ Tany))((desc(Var al))(typ(Talgebraic list(Tany)))))))(typ(Talgebraic bool()))))(Rec check_(m al nl)((desc(Match(((desc(Var m))(typ(Talgebraic lambda()))))((Case(Pat_Constr V((Pat_Var n)))((desc(Call for_all(((desc(Call aux(((desc(Var al))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Tarrow((Talgebraic string())(Talgebraic bool())))))((desc(Call Cons(((desc(Var n))(typ(Talgebraic string())))((desc(Var nl))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic bool()))))(Case(Pat_Constr P((Pat_Var n)(Pat_Var m_)))((desc(Call check_(((desc(Var m_))(typ(Talgebraic lambda())))((desc(Call Cons(((desc(Var n))(typ(Talgebraic string())))((desc(Var al))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic list((Talgebraic string())))))((desc(Var nl))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic bool()))))(Case(Pat_Constr C((Pat_Var m_1)(Pat_Var m_2)))((desc(Call &&(((desc(Call check_(((desc(Var m_1))(typ(Talgebraic lambda())))((desc(Var al))(typ(Talgebraic list((Talgebraic string())))))((desc(Var nl))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic bool())))((desc(Call check_(((desc(Var m_2))(typ(Talgebraic lambda())))((desc(Var al))(typ(Talgebraic list((Talgebraic string())))))((desc(Var nl))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic bool()))))))(typ(Talgebraic bool())))))))(typ(Talgebraic bool()))))(NonRec check(m)((desc(Call check_(((desc(Var m))(typ(Talgebraic lambda())))((desc(Call Nil()))(typ(Talgebraic list((Talgebraic string())))))((desc(Call Nil()))(typ(Talgebraic list((Talgebraic string()))))))))(typ(Talgebraic bool())))))



No conjecture

>>> 


1st goal of : forall (str:string), check_ (V (str)) (Nil) = false

---------------------------------------
forall (str:string), check_ (V (str)) (Nil) = false

0 goal(s) more...

0 conjecture(s) more...

>>> 