Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

0 goal(s) more...

0 conjecture(s) more...
previous tactics


1st goal of : any
string1 : string
string2 : string
---------------------------------------
forall (lambda2:lambda), lambda2 = P (string2) (lambda2) -> sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))
sub_check_ta1 (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = sub_check (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil))))
lhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
rhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
lhs_increase_subtree
Cons(string2, _)
Cons(string3, _)
rhs_increase_subtree
Cons(string2, _)
Cons(string3, _)
New Env
let rec mk_lhs1 arg_1 arg_2 =
match (arg_1) with
| Nil  -> Cons (arg_2) (Nil)
| Cons hd tl -> Cons (hd) (mk_lhs1 (tl) (arg_2))
;;
let rec mk_rhs1 arg_3 arg_4 =
match (arg_3) with
| Nil  -> Cons (arg_4) (Nil)
| Cons hd tl -> Cons (hd) (mk_rhs1 (tl) (arg_4))
;;
Advanced Generalize
Assert List
forall (string1:string), mk_lhs1 (Nil) (string1) = Cons (string1) (Nil)
forall (hd:string) (tl:string list) (string1:string), mk_lhs1 (Cons (hd) (tl)) (string1) = Cons (hd) (mk_lhs1 (tl) (string1))
forall (string1:string), mk_rhs1 (Nil) (string1) = Cons (string1) (Nil)
forall (hd:string) (tl:string list) (string1:string), mk_rhs1 (Cons (hd) (tl)) (string1) = Cons (hd) (mk_rhs1 (tl) (string1))
forall (lambda2:lambda) (lst:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string1)) = sub_check (lambda2) (mk_rhs1 (lst) (string1))
End of Assert List
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string1)) = sub_check (lambda2) (mk_rhs1 (lst) (string1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (mk_lhs1 (string_list1) (string1)) = sub_check (V (string2)) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (mk_lhs1 (string_list1) (string1)) = sub_check (V (string2)) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (mk_lhs1 (string_list1) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:2)
intro string_list1(rank:2)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (mk_lhs1 (string_list1) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 2)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Nil) (string1)) (string2) = mem (string2) (mk_rhs1 (Nil) (string1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Nil) (string1)) (string2) = mem (string2) (mk_rhs1 (Nil) (string1))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Cons (string3) (string_list2)) (string1)) (string2) = mem (string2) (mk_rhs1 (Cons (string3) (string_list2)) (string1))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Cons (string3) (string_list2)) (string1)) (string2) = mem (string2) (mk_rhs1 (Cons (string3) (string_list2)) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (mk_rhs1 (string_list2) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (mk_rhs1 (string_list2) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) (mk_lhs1 (string_list1) (string1)) = sub_check (P (string2) (lambda2)) (mk_rhs1 (string_list1) (string1))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) (mk_lhs1 (string_list1) (string1)) = sub_check (P (string2) (lambda2)) (mk_rhs1 (string_list1) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (Cons (string2) (mk_rhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- rhs_lemma4 in goal at 0(rank:2)
rewrite <- lhs_lemma2 in goal at 0(rank:2)
induction string_list1(rank:2)
intro string_list1(rank:2)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (Cons (string2) (mk_rhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma4 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1)) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string1)) = sub_check (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string1)) = sub_check (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
induction string_list1(rank:0)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 1(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
rewrite IH2 in goal at 0(rank:2)
rewrite IH2 in goal at 1(rank:2)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- lhs_lemma1 in goal at 1(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
case sub_check_ta1 (lambda2) (Cons (string1) (Nil))(rank:2)
case sub_check (lambda2) (Cons (string1) (Nil))(rank:2)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 39
Tactic List : 1
rewrite <- lhs_lemma1 in goal at 1(rank:2)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lhs_lemma1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma3 in goal at 0(rank:1)
rewrite lemma5 in goal at 0(rank:1)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- rhs_lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (mk_rhs1 (Nil) (string1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma5 in goal at 0(rank:1)
rewrite lemma5 in goal at 0(rank:1)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_rhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_rhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (Nil)(rank:2)
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (Nil)(rank:0)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:0)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:2)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
case sub_check_ta1 (lambda2) (Nil)(rank:2)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) (Nil)(rank:0)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check_ta1 (lambda2) (Nil)(rank:0)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:1)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any
lambda3 : lambda
---------------------------------------
forall (lambda2:lambda), sub_check (lambda2) (Nil) = true -> if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
New Env

;;
Advanced Generalize
Assert List
forall (lambda2:lambda) (lambda3:lambda), sub_check (lambda2) (Nil) = true -> if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)
End of Assert List
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lambda3:lambda), sub_check (lambda2) (Nil) = true -> if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda2(rank:0)
induction lambda1(rank:0)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check (V (string1)) (Nil) = true -> if sub_check_ta1 (V (string1)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 64


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check (V (string1)) (Nil) = true -> if sub_check_ta1 (V (string1)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), false = true -> false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda2(rank:0)
=================================================
Progress: 65


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if sub_check_ta1 (V (string2)) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), false = true -> false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = sub_check (V (string2)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if sub_check_ta1 (V (string2)) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = sub_check (V (string2)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any

---------------------------------------
forall (lambda3:lambda), sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
New Env

;;
Advanced Generalize
Assert List
forall (lambda3:lambda), sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)
End of Assert List
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda3:lambda), sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- lhs_lemma1 in goal at 1(rank:2)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (P (string2) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string2) (lambda3)) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (P (string2) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string2) (lambda3)) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string2) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string2) (Nil)) then sub_check_ta1 (V (string1)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
case sub_check_ta1 (lambda3) (Cons (string2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string2) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string2) (Nil)) then sub_check_ta1 (V (string1)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string1)) (Nil) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda3) (Cons (string2) (Nil)) then sub_check_ta1 (V (string1)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda3) (Cons (string2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (P (string2) (lambda3)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 2(rank:1)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (P (string2) (lambda3)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite IH1 in goal at 2(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:1)
intro Cond1(rank:1)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (P (string2) (lambda3)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Nil) = true -> sub_check (lambda3) (Nil) = sub_check (P (string2) (lambda3)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> sub_check (lambda3) (Nil) = sub_check (lambda3) (Cons (string2) (Nil))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Nil) = true -> sub_check (lambda3) (Nil) = sub_check (lambda3) (Cons (string2) (Nil))

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (P (string2) (lambda3)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> sub_check (lambda3) (Nil) = sub_check (P (string2) (lambda3)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
Cond1 : false = true
---------------------------------------
false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda3 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string2) (lambda3)
Cond1 : false = true
---------------------------------------
false = sub_check (lambda3) (Cons (string2) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 2(rank:1)
rewrite IH2 in goal at 0(rank:1)
rewrite IH1 in goal at 2(rank:1)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 10
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 1(rank:1)
rewrite IH1 in goal at 2(rank:1)
rewrite IH1 in goal at 1(rank:1)
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH2 in goal at 2(rank:1)
case sub_check (lambda3) (Nil)(rank:2)
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> sub_check (lambda4) (Nil) = sub_check (C (lambda3) (lambda4)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (lambda4) (Nil) = true -> sub_check (lambda4) (Nil) = sub_check (C (lambda3) (lambda4)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (lambda3) (Nil) = true -> sub_check (lambda3) (Nil) = sub_check (C (lambda3) (lambda4)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then false else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH1 in goal at 0(rank:1)
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 1(rank:2)
case sub_check (lambda3) (Nil)(rank:2)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if false then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
simpl in goal(rank:0)
rewrite IH2 in goal at 0(rank:2)
rewrite IH2 in goal at 2(rank:2)
rewrite IH2 in goal at 1(rank:2)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if false then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
intro Cond1(rank:1)
rewrite IH2 in goal at 2(rank:2)
rewrite IH2 in goal at 1(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> sub_check (lambda4) (Nil) = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite <- IH1 in goal at 0(rank:1)
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:2)
case sub_check (lambda3) (Nil)(rank:2)
rewrite IH1 in goal at 2(rank:2)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = sub_check (C (lambda3) (lambda4)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> sub_check (lambda3) (Nil) = sub_check (C (lambda3) (lambda4)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (lambda4) (Nil) = true -> sub_check (lambda4) (Nil) = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH1 in goal at 0(rank:1)
case sub_check (lambda3) (Nil)(rank:2)
intro Cond1(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> sub_check (lambda3) (Nil) = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite <- IH2 in goal at 0(rank:1)
intro Cond1(rank:1)
rewrite IH2 in goal at 0(rank:2)
case sub_check (lambda3) (Nil)(rank:2)
rewrite IH2 in goal at 2(rank:2)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (lambda3) (Nil) = true -> sub_check (lambda3) (Nil) = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH2 in goal at 0(rank:1)
case sub_check (lambda3) (Nil)(rank:2)
intro Cond1(rank:1)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
Cond1 : false = true
---------------------------------------
false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
lambda1 : lambda
string1 : string
IH1 : false = true -> false = sub_check (lambda3) (Nil)
IH2 : false = true -> false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
Cond1 : false = true
---------------------------------------
false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (P (string1) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 39
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 2(rank:1)
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (P (string1) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction lambda2(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = sub_check (V (string2)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = sub_check (V (string2)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (P (string1) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 2
induction lambda2(rank:0)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 4
intro Cond1(rank:1)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 3
induction lambda2(rank:0)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 5
intro Cond1(rank:1)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (P (string1) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
forall (lambda2:lambda), sub_check (P (string1) (lambda3)) (Nil) = true -> if sub_check_ta1 (P (string1) (lambda3)) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 1
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 111


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = sub_check (V (string2)) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 5
intro Cond1(rank:1)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
=================================================
Progress: 112


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 113


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (P (string1) (lambda3)) (Nil) else false = true
---------------------------------------
if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 3
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 114


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 3
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 115


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = true -> if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if sub_check_ta1 (lambda1) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda2:lambda), sub_check (lambda3) (Nil) = true -> if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (lambda2) (Nil) else false = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check_ta1 (lambda3) (Cons (string1) (Nil)) then sub_check_ta1 (V (string2)) (Nil) else false = if sub_check_ta1 (lambda3) (Nil) then sub_check_ta1 (V (string2)) (Nil) else false

4 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
Tactic List : 3
case sub_check_ta1 (lambda3) (Nil)(rank:2)
case sub_check_ta1 (lambda3) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 116


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 117


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 118


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any

---------------------------------------
forall (lambda3:lambda), match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
New Env

;;
Advanced Generalize
Assert List
forall (lambda3:lambda), match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
End of Assert List
=================================================
Progress: 119


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda3:lambda), match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 120


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 121


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 122


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (C (lambda2) (lambda3)) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (C (lambda2) (lambda3)) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 1
Tactic List : 5
rewrite <- lemma6 in goal at 0(rank:1)
rewrite lemma6 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite <- IH2 in goal at 0(rank:1)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:0)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any
lambda3 : lambda
---------------------------------------
forall (lambda2:lambda), sub_check (lambda2) (Nil) = true -> if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
New Env

;;
Advanced Generalize
Assert List
forall (lambda2:lambda) (lambda3:lambda), sub_check (lambda2) (Nil) = true -> if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
End of Assert List
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lambda3:lambda), sub_check (lambda2) (Nil) = true -> if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda2(rank:0)
induction lambda1(rank:0)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

---------------------------------------
forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check (V (string1)) (Nil) = true -> if match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (V (string1)) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check (V (string1)) (Nil) = true -> if match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), false = true -> false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda2(rank:0)
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if match (V (string2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), false = true -> false = sub_check (lambda2) (Nil)

2 goal(s) more...

1 conjecture(s) more...
>>> induction lambda2(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = sub_check (V (string2)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if match (V (string2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = sub_check (V (string2)) (Nil)

4 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string2 : string
lambda1 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
---------------------------------------
false = true -> false = false

4 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
Cond1 : false = true
---------------------------------------
false = false

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (P (string2) (lambda3)) (Nil) = true -> if match (P (string2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (P (string2) (lambda3)) (Nil) = true -> if match (P (string2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string2) (Nil)) = true -> if sub_check (lambda3) (Cons (string2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
intro Cond1(rank:1)
case sub_check (lambda3) (Cons (string2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
---------------------------------------
sub_check (lambda3) (Cons (string2) (Nil)) = true -> if sub_check (lambda3) (Cons (string2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda3) (Cons (string2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite Cond1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda3) (Cons (string2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
if true then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
if true then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda3 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = P (string2) (lambda3)
Cond1 : sub_check (lambda3) (Cons (string2) (Nil)) = true
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
---------------------------------------
sub_check (C (lambda3) (lambda4)) (Nil) = true -> if match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 12
Tactic List : 5
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
---------------------------------------
sub_check (C (lambda3) (lambda4)) (Nil) = true -> if match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true -> if if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 9
intro Cond1(rank:1)
case if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH2 in goal at 2(rank:2)
case sub_check (lambda3) (Nil)(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true -> if if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
if if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 7
rewrite Cond1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 2(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
if if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
if true then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
if true then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda3 : lambda
lambda4 : lambda
lambda2 : lambda
string1 : string
IH1 : sub_check (lambda3) (Nil) = true -> if match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false
Inductive1 : lambda1 = C (lambda3) (lambda4)
Cond1 : if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = true
---------------------------------------
false = false

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (P (string1) (lambda3)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 22
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (P (string1) (lambda3)) (Nil)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if match (V (string2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
simpl in goal(rank:0)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
sub_check (V (string2)) (Nil) = true -> if match (V (string2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
intro Cond1(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
---------------------------------------
false = true -> false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
Cond1 : false = true
---------------------------------------
false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
Cond1 : false = true
---------------------------------------
false = sub_check (lambda3) (Cons (string1) (Nil))

3 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (P (string2) (lambda4)) (Nil) = true -> if match (P (string2) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (P (string2) (lambda4)) (Nil) = true -> if match (P (string2) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (lambda4) (Cons (string2) (Nil)) = true -> if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite <- IH2 in goal at 0(rank:1)
intro Cond1(rank:1)
case sub_check (lambda4) (Cons (string2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 1(rank:2)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (P (string2) (lambda4)) (Nil) = true -> if match (P (string2) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (P (string2) (lambda4)) (Nil) = true -> if match (P (string2) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (lambda4) (Cons (string2) (Nil)) = true -> if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (lambda4) (Cons (string2) (Nil)) = true -> if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma1 in goal at 2(rank:1)
case sub_check (lambda4) (Cons (string2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:1)
intro Cond1(rank:1)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
---------------------------------------
sub_check (lambda4) (Cons (string2) (Nil)) = true -> if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:1)
rewrite <- lhs_lemma1 in goal at 1(rank:2)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
case match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if sub_check (lambda4) (Cons (string2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if true then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
simpl in goal(rank:0)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
if true then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string2 : string
lambda4 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = P (string2) (lambda4)
Cond1 : sub_check (lambda4) (Cons (string2) (Nil)) = true
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = sub_check (lambda3) (Cons (string1) (Nil))

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 13
Tactic List : 4
simpl in goal(rank:0)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH3 in goal at 0(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
rewrite <- IH3 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
intro Cond1(rank:1)
case sub_check (lambda4) (Nil)(rank:2)
case if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false(rank:2)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
sub_check (C (lambda4) (lambda5)) (Nil) = true -> if match (C (lambda4) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
case if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false(rank:2)
case sub_check (lambda4) (Nil)(rank:2)
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
case if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false(rank:2)
case sub_check (lambda4) (Nil)(rank:2)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
---------------------------------------
if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true -> if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:1)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
rewrite <- IH2 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:1)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if true then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
simpl in goal(rank:0)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
if true then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda4 : lambda
lambda5 : lambda
lambda2 : lambda
string1 : string
lambda3 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
Inductive1 : lambda2 = P (string1) (lambda3)
IH2 : sub_check (lambda4) (Nil) = true -> if match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (P (string1) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Cons (string1) (Nil))
Inductive2 : lambda1 = C (lambda4) (lambda5)
Cond1 : if sub_check (lambda4) (Nil) then sub_check (lambda5) (Nil) else false = true
---------------------------------------
sub_check (lambda3) (Cons (string1) (Nil)) = sub_check (lambda3) (Cons (string1) (Nil))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (C (lambda3) (lambda4)) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 17
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (C (lambda3) (lambda4)) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (V (string1)) (Nil) = true -> if match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
sub_check (V (string1)) (Nil) = true -> if match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
intro Cond1(rank:1)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
---------------------------------------
false = true -> false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
Cond1 : false = true
---------------------------------------
false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
discriminate(rank:0)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
Cond1 : false = true
---------------------------------------
false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

2 goal(s) more...

1 conjecture(s) more...
>>> discriminate(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (P (string1) (lambda5)) (Nil) = true -> if match (P (string1) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 2
simpl in goal(rank:0)
rewrite <- IH3 in goal at 0(rank:1)
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (P (string1) (lambda5)) (Nil) = true -> if match (P (string1) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (lambda5) (Cons (string1) (Nil)) = true -> if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 5
rewrite <- IH3 in goal at 0(rank:1)
intro Cond1(rank:1)
case sub_check (lambda5) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 2(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (P (string1) (lambda5)) (Nil) = true -> if match (P (string1) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (P (string1) (lambda5)) (Nil) = true -> if match (P (string1) (lambda5)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (lambda5) (Cons (string1) (Nil)) = true -> if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (lambda5) (Cons (string1) (Nil)) = true -> if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- lhs_lemma1 in goal at 2(rank:1)
case sub_check (lambda5) (Cons (string1) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:1)
intro Cond1(rank:1)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
---------------------------------------
sub_check (lambda5) (Cons (string1) (Nil)) = true -> if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 4
rewrite <- IH3 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:1)
case sub_check (lambda3) (Nil)(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:2)
case match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda5) (Cons (string1) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if true then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if true then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
string1 : string
lambda5 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = P (string1) (lambda5)
Cond1 : sub_check (lambda5) (Cons (string1) (Nil)) = true
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 12
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 3
simpl in goal(rank:0)
rewrite <- IH3 in goal at 0(rank:1)
rewrite <- IH4 in goal at 0(rank:1)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 5
rewrite <- IH4 in goal at 0(rank:1)
rewrite <- IH3 in goal at 0(rank:1)
intro Cond1(rank:1)
case sub_check (lambda5) (Nil)(rank:2)
case if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false(rank:2)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH4 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro Cond1(rank:1)
case if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false(rank:2)
case sub_check (lambda5) (Nil)(rank:2)
case match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 196


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro Cond1(rank:1)
case if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false(rank:2)
case sub_check (lambda5) (Nil)(rank:2)
=================================================
Progress: 197


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH4 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
sub_check (C (lambda5) (lambda6)) (Nil) = true -> if match (C (lambda5) (lambda6)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
state_list
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
---------------------------------------
if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true -> if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro Cond1(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 4
rewrite <- IH4 in goal at 0(rank:1)
case sub_check (lambda3) (Nil)(rank:2)
rewrite <- IH3 in goal at 0(rank:1)
rewrite Cond1 in goal at 0(rank:1)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH4 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
case match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite Cond1 in goal at 0(rank:2)
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite Cond1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if true then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if true then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
lambda3 |> lambda3
lambda3 |> lambda3
lambda4 |> lambda4
lambda4 |> lambda4
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (lambda2:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda2) (Nil)
lambda1 : lambda
lambda5 : lambda
lambda6 : lambda
lambda2 : lambda
lambda3 : lambda
lambda4 : lambda
IH1 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)
IH2 : forall (lambda1:lambda), sub_check (lambda1) (Nil) = true -> if match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda4) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda4) (Nil)
Inductive1 : lambda2 = C (lambda3) (lambda4)
IH3 : sub_check (lambda5) (Nil) = true -> if match (lambda5) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
IH4 : sub_check (lambda6) (Nil) = true -> if match (lambda6) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (C (lambda3) (lambda4)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false
Inductive2 : lambda1 = C (lambda5) (lambda6)
Cond1 : if sub_check (lambda5) (Nil) then sub_check (lambda6) (Nil) else false = true
---------------------------------------
if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false = if sub_check (lambda3) (Nil) then sub_check (lambda4) (Nil) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 15
arg52545 |> lambda3
arg52547 |> lambda3
arg52549 |> lambda3
arg52551 |> lambda3
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:2)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
arg52961 |> lambda3
arg52963 |> lambda3
arg52965 |> lambda3
arg52967 |> lambda3
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) (Nil)(rank:0)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- IH2 in goal at 0(rank:1)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- lemma6 in goal at 0(rank:1)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
Case2 : sub_check_ta1 (lambda2) (Nil) = false
---------------------------------------
false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
rewrite <- lemma6 in goal at 0(rank:2)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite lemma6 in goal at 1(rank:1)
rewrite lemma6 in goal at 0(rank:1)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite Case1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 0(rank:2)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if true then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
simpl in goal(rank:0)
rewrite <- lemma6 in goal at 0(rank:1)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if true then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite <- lemma6 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
rewrite lemma6 in goal at 0(rank:1)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if true then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0


1st goal of : any

---------------------------------------
forall (lambda3:lambda), if true then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

0 goal(s) more...

0 conjecture(s) more...
previous tactics
state_list
New Env

;;
Advanced Generalize
Assert List
forall (lambda3:lambda), if true then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)
End of Assert List
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda3:lambda), if true then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
simpl in goal(rank:0)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 221


1st goal of : forall (lambda1:lambda), if true then sub_check (lambda1) (Nil) else false = sub_check (lambda1) (Nil)

---------------------------------------
forall (lambda1:lambda), sub_check (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 2
Tactic List : 5
rewrite Case1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma7 in goal at 2(rank:2)
rewrite <- lemma7 in goal at 1(rank:2)
rewrite <- lemma7 in goal at 0(rank:2)
=================================================
Progress: 222


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if true then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if true then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 1(rank:2)
rewrite <- IH2 in goal at 0(rank:2)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 23
Tactic List : 4
rewrite <- IH2 in goal at 0(rank:1)
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite lemma6 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
rewrite lemma6 in goal at 1(rank:1)
rewrite lemma6 in goal at 0(rank:1)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 1(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- IH2 in goal at 0(rank:1)
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite Case1 in goal at 0(rank:1)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if sub_check (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite Case1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if false then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
if false then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = false

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = false
---------------------------------------
false = false

0 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


No conjecture
Proof Success
Helper Functions
let rec mk_lhs1 arg_1 arg_2 =
match (arg_1) with
| Nil  -> Cons (arg_2) (Nil)
| Cons hd tl -> Cons (hd) (mk_lhs1 (tl) (arg_2))
;;
let rec mk_rhs1 arg_3 arg_4 =
match (arg_3) with
| Nil  -> Cons (arg_4) (Nil)
| Cons hd tl -> Cons (hd) (mk_rhs1 (tl) (arg_4))
;;
Proof
assert forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
simpl in goal
induction lambda1
simpl in goal
reflexivity
simpl in goal
assert forall (string1:string), mk_lhs1 (Nil) (string1) = Cons (string1) (Nil)
simpl in goal
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string), mk_lhs1 (Cons (string1) (string_list1)) (string2) = Cons (string1) (mk_lhs1 (string_list1) (string2))
simpl in goal
reflexivity
assert forall (string1:string), mk_rhs1 (Nil) (string1) = Cons (string1) (Nil)
simpl in goal
reflexivity
assert forall (string1:string) (string_list1:string list) (string2:string), mk_rhs1 (Cons (string1) (string_list1)) (string2) = Cons (string1) (mk_rhs1 (string_list1) (string2))
simpl in goal
reflexivity
assert forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
induction lambda1
simpl in goal
induction string_list1
simpl in goal
intro string1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
reflexivity
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- rhs_lemma4 in goal at 0
rewrite <- IH1 in goal at 0
simpl in goal
reflexivity
simpl in goal
rewrite <- IH2 in goal at 0
rewrite <- IH1 in goal at 0
reflexivity
rewrite <- lhs_lemma1 in goal at 1
rewrite lemma5 in goal at 0
simpl in goal
reflexivity
simpl in goal
rewrite IH2 in goal at 0
case sub_check (lambda2) (Nil)
assert forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
induction lambda1
simpl in goal
reflexivity
simpl in goal
reflexivity
simpl in goal
reflexivity
rewrite IH1 in goal at 0
rewrite lemma6 in goal at 1
rewrite Case1 in goal at 0
simpl in goal
rewrite <- lemma6 in goal at 0
reflexivity
rewrite IH1 in goal at 0
rewrite lemma6 in goal at 1
rewrite Case1 in goal at 0
simpl in goal
reflexivity
Qed
