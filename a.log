Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 2


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = sub_check (l) (Nil)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 3


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = sub_check (l) (Nil)

0 goal(s) more...

0 conjecture(s) more...
>>> induction l(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 4


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = sub_check (P (string4) (lambda5)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = sub_check (P (string4) (lambda5)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = sub_check (lambda5) (Nil)
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (lambda5) (Cons (string4) (Nil)) = sub_check (lambda5) (Cons (string4) (Nil))

1 goal(s) more...

0 conjecture(s) more...
*******
state_list
sub_check_ta1 (lambda5) (Cons (string4) (Nil)) = sub_check (lambda5) (Cons (string4) (Nil))
sub_check_ta1 (lambda19) (Cons (string18) (Cons (string4) (Nil))) = sub_check (lambda19) (Cons (string18) (Cons (string4) (Nil)))
sub_check_ta1 (lambda35) (Cons (string34) (Cons (string18) (Cons (string4) (Nil)))) = sub_check (lambda35) (Cons (string34) (Cons (string18) (Cons (string4) (Nil))))
sub_check_ta1 (lambda51) (Cons (string50) (Cons (string34) (Cons (string18) (Cons (string4) (Nil))))) = sub_check (lambda51) (Cons (string50) (Cons (string34) (Cons (string18) (Cons (string4) (Nil)))))
recursive subtree
let rec mk_lhs lst string4 =
match (lst) with
| Nil  -> Cons (string4) (Nil)
| Cons hd tl -> Cons (hd) (mk_lhs (tl) (string4))
;;
let rec mk_rhs lst string4 =
match (lst) with
| Nil  -> Cons (string4) (Nil)
| Cons hd tl -> Cons (hd) (mk_rhs (tl) (string4))
;;
