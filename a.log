Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 2


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), check_ta1 (l) = check (l)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = match (l) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 3


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)

---------------------------------------
forall (l:lambda), sub_check_ta1 (l) (Nil) = match (l) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction l(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 4


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 5


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = match (lambda5) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = match (P (string4) (lambda5)) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
=================================================
Progress: 6


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = match (lambda5) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (P (string4) (lambda5)) (Nil) = match (P (string4) (lambda5)) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (l:lambda), check_ta1 (l) = check (l)
string4 : string
lambda5 : lambda
IH6 : sub_check_ta1 (lambda5) (Nil) = match (lambda5) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))
Inductive7 : l = P (string4) (lambda5)
---------------------------------------
sub_check_ta1 (lambda5) (Cons (string4) (Nil)) = sub_check (lambda5) (Cons (string4) (Nil))

1 goal(s) more...

0 conjecture(s) more...
mmmmmmmmmmmmmmmmmm
sub_check_ta1 (lambda5) (Cons (string4) (Nil))
sub_check_ta1 (lambda19) (Cons (string18) (Cons (string4) (Nil)))
sub_check_ta1 (lambda33) (Cons (string32) (Cons (string18) (Cons (string4) (Nil))))
sub_check_ta1 (lambda47) (Cons (string46) (Cons (string32) (Cons (string18) (Cons (string4) (Nil)))))
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, _))
Cons(string4, Nil())
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string18, Cons(string4, Nil()))
Cons(string18, Cons(string4, _))
Cons(string18, Cons(_, Nil()))
Cons(string18, Cons(_, _))
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, Cons(_, _))))
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string32, Cons(string18, Cons(string4, Nil())))
Cons(string32, Cons(string18, Cons(string4, _)))
Cons(string32, Cons(string18, Cons(_, Nil())))
Cons(string32, Cons(string18, Cons(_, _)))
Cons(string32, Cons(string18, _))
Cons(string32, Cons(_, Cons(string4, Nil())))
Cons(string32, Cons(_, Cons(string4, _)))
Cons(string32, Cons(_, Cons(_, Nil())))
Cons(string32, Cons(_, Cons(_, _)))
Cons(string32, Cons(_, _))
mmmmmmmmmmmmmmmmmm
sub_check_ta1 (lambda5) (Nil)
sub_check_ta1 (lambda5) (Cons (string4) (Nil))
sub_check_ta1 (lambda19) (Cons (string18) (Cons (string4) (Nil)))
sub_check_ta1 (lambda33) (Cons (string32) (Cons (string18) (Cons (string4) (Nil))))
sub_check_ta1 (lambda47) (Cons (string46) (Cons (string32) (Cons (string18) (Cons (string4) (Nil)))))
largest_common_subtree-----------
sub_check_ta1(lambda5, _)
Nil()
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, _))
Cons(string4, Nil())
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string18, Cons(string4, Nil()))
Cons(string18, Cons(string4, _))
Cons(string18, Cons(_, Nil()))
Cons(string18, Cons(_, _))
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, Cons(_, _))))
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string32, Cons(string18, Cons(string4, Nil())))
Cons(string32, Cons(string18, Cons(string4, _)))
Cons(string32, Cons(string18, Cons(_, Nil())))
Cons(string32, Cons(string18, Cons(_, _)))
Cons(string32, Cons(string18, _))
Cons(string32, Cons(_, Cons(string4, Nil())))
Cons(string32, Cons(_, Cons(string4, _)))
Cons(string32, Cons(_, Cons(_, Nil())))
Cons(string32, Cons(_, Cons(_, _)))
Cons(string32, Cons(_, _))
mmmmmmmmmmmmmmmmmm
sub_check_ta1 (lambda5) (Cons (string4) (Nil))
sub_check_ta1 (lambda19) (Cons (string18) (Cons (string4) (Nil)))
sub_check_ta1 (lambda33) (Cons (string32) (Cons (string18) (Cons (string4) (Nil))))
sub_check_ta1 (lambda47) (Cons (string46) (Cons (string32) (Cons (string18) (Cons (string4) (Nil)))))
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, _))
Cons(string4, Nil())
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string18, Cons(string4, Nil()))
Cons(string18, Cons(string4, _))
Cons(string18, Cons(_, Nil()))
Cons(string18, Cons(_, _))
largest_common_subtree-----------
sub_check_ta1(_, Cons(_, Cons(_, Cons(_, _))))
sub_check_ta1(_, Cons(_, Cons(_, _)))
sub_check_ta1(_, Cons(_, _))
Cons(string32, Cons(string18, Cons(string4, Nil())))
Cons(string32, Cons(string18, Cons(string4, _)))
Cons(string32, Cons(string18, Cons(_, Nil())))
Cons(string32, Cons(string18, Cons(_, _)))
Cons(string32, Cons(string18, _))
Cons(string32, Cons(_, Cons(string4, Nil())))
Cons(string32, Cons(_, Cons(string4, _)))
Cons(string32, Cons(_, Cons(_, Nil())))
Cons(string32, Cons(_, Cons(_, _)))
Cons(string32, Cons(_, _))
mmmmmmmmmmmmmmmmmm
match (lambda5) with
| V na -> false
| P st k -> sub_check (k) (Cons (st) (Nil))
| C me1 me2 -> && (sub_check (me1) (Nil)) (sub_check (me2) (Nil))
sub_check (lambda5) (Cons (string4) (Nil))
sub_check (lambda19) (Cons (string18) (Cons (string4) (Nil)))
sub_check (lambda33) (Cons (string32) (Cons (string18) (Cons (string4) (Nil))))
sub_check (lambda47) (Cons (string46) (Cons (string32) (Cons (string18) (Cons (string4) (Nil)))))
Lemma List : 0
