Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
*******************************************
candidates
induction lambda1(rank:0)
intro string1(rank:1)
>>> induction lambda1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (Nil)) = sub_check (V (string2)) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

2 goal(s) more...

0 conjecture(s) more...
candidates
intro string1(rank:1)
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

2 goal(s) more...

0 conjecture(s) more...
candidates
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

3 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), sub_check_ta1 (P (string2) (lambda2)) (Cons (string1) (Nil)) = sub_check (P (string2) (lambda2)) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))

1 goal(s) more...

0 conjecture(s) more...
candidates
intro string1(rank:1)
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (Nil)) = sub_check (lambda1) (Cons (string1) (Nil))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string1:string), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
Inductive1 : lambda1 = P (string2) (lambda2)
string1 : string
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))

1 goal(s) more...

0 conjecture(s) more...
candidates
*******************************************
candidates
induction lambda1(rank:0)
intro string2(rank:1)
intro string1(rank:1)
>>> induction lambda1


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
---------------------------------------
forall (string1:string) (string2:string), sub_check_ta1 (V (string3)) (Cons (string2) (Cons (string1) (Nil))) = sub_check (V (string3)) (Cons (string2) (Cons (string1) (Nil)))

2 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
---------------------------------------
forall (string1:string) (string2:string), if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string1) (Nil)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
candidates
intro string2(rank:1)
intro string1(rank:1)
>>> intro string2


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
---------------------------------------
forall (string1:string), if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string1) (Nil)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
candidates
intro string1(rank:1)
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
string1 : string
---------------------------------------
if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string1) (Nil)) (string3) = if match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Cons (string1) (Nil))

2 goal(s) more...

0 conjecture(s) more...
candidates
case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
>>> case match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

3 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string3) = if match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
candidates
case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
>>> case match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2)


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
Case2 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

3 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
string2 : string
string1 : string
Case1 : match (string2, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
Case2 : match (string1, string3) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string1:string) (string2:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string1:string) (string2:string), sub_check_ta1 (P (string3) (lambda2)) (Cons (string2) (Cons (string1) (Nil))) = sub_check (P (string3) (lambda2)) (Cons (string2) (Cons (string1) (Nil)))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string1:string) (string2:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))
Inductive1 : lambda1 = P (string3) (lambda2)
---------------------------------------
forall (string1:string) (string2:string), sub_check_ta1 (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = sub_check (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil))))

1 goal(s) more...

0 conjecture(s) more...
candidates
intro string2(rank:1)
intro string1(rank:1)
>>> intro string2


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string1:string) (string2:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
---------------------------------------
forall (string1:string), sub_check_ta1 (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = sub_check (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil))))

1 goal(s) more...

0 conjecture(s) more...
candidates
intro string1(rank:1)
>>> intro string1


1st goal of : forall (lambda1:lambda) (string1:string) (string2:string), sub_check_ta1 (lambda1) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda1) (Cons (string2) (Cons (string1) (Nil)))
lambda1 : lambda
string3 : string
lambda2 : lambda
IH1 : forall (string1:string) (string2:string), sub_check_ta1 (lambda2) (Cons (string2) (Cons (string1) (Nil))) = sub_check (lambda2) (Cons (string2) (Cons (string1) (Nil)))
Inductive1 : lambda1 = P (string3) (lambda2)
string2 : string
string1 : string
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = sub_check (lambda2) (Cons (string3) (Cons (string2) (Cons (string1) (Nil))))

1 goal(s) more...

0 conjecture(s) more...
candidates
lhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
rhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
lhs_increase_subtree
Cons(string2, _)
Cons(string3, _)
rhs_increase_subtree
Cons(string2, _)
Cons(string3, _)
New Env
let rec mk_lhs1 arg_1 arg_2 =
match (arg_1) with
| Nil  -> Cons (arg_2) (Nil)
| Cons hd tl -> Cons (hd) (mk_lhs1 (tl) (arg_2))
;;
let rec mk_rhs1 arg_3 arg_4 =
match (arg_3) with
| Nil  -> Cons (arg_4) (Nil)
| Cons hd tl -> Cons (hd) (mk_rhs1 (tl) (arg_4))
;;
Advanced Generalize
Assert List
forall (string1:string), mk_lhs1 (Nil) (string1) = Cons (string1) (Nil)
forall (hd:string) (tl:string list) (string1:string), mk_lhs1 (Cons (hd) (tl)) (string1) = Cons (hd) (mk_lhs1 (tl) (string1))
forall (string1:string), mk_rhs1 (Nil) (string1) = Cons (string1) (Nil)
forall (hd:string) (tl:string list) (string1:string), mk_rhs1 (Cons (hd) (tl)) (string1) = Cons (hd) (mk_rhs1 (tl) (string1))
forall (lambda2:lambda) (lst:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string1)) = sub_check (lambda2) (mk_rhs1 (lst) (string1))
End of Assert List
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (lambda2:lambda) (lst:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (lst) (string1)) = sub_check (lambda2) (mk_rhs1 (lst) (string1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 8


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

---------------------------------------
forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (mk_lhs1 (string_list1) (string1)) = sub_check (V (string2)) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 9


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (V (string2)) (mk_lhs1 (string_list1) (string1)) = sub_check (V (string2)) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (mk_lhs1 (string_list1) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:2)
intro string_list1(rank:2)
=================================================
Progress: 10


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
---------------------------------------
forall (string_list1:string list) (string1:string), is_mem_ta1 (mk_lhs1 (string_list1) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list1) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 2)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Nil) (string1)) (string2) = mem (string2) (mk_rhs1 (Nil) (string1))

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 11


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Nil) (string1)) (string2) = mem (string2) (mk_rhs1 (Nil) (string1))

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 12


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 13


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 14


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 15


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
string2 : string
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Cons (string3) (string_list2)) (string1)) (string2) = mem (string2) (mk_rhs1 (Cons (string3) (string_list2)) (string1))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 16


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (mk_lhs1 (Cons (string3) (string_list2)) (string1)) (string2) = mem (string2) (mk_rhs1 (Cons (string3) (string_list2)) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (mk_rhs1 (string_list2) (string1))

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 17


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (mk_rhs1 (string_list2) (string1))

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 18


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
string3 : string
string_list2 : string list
lambda1 : lambda
string2 : string
IH1 : forall (string1:string), is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = mem (string2) (mk_rhs1 (string_list2) (string1))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (mk_lhs1 (string_list2) (string1)) (string2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) (mk_lhs1 (string_list1) (string1)) = sub_check (P (string2) (lambda2)) (mk_rhs1 (string_list1) (string1))

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 3
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 19


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (P (string2) (lambda2)) (mk_lhs1 (string_list1) (string1)) = sub_check (P (string2) (lambda2)) (mk_rhs1 (string_list1) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (Cons (string2) (mk_rhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- rhs_lemma4 in goal at 0(rank:2)
rewrite <- lhs_lemma2 in goal at 0(rank:2)
induction string_list1(rank:2)
intro string_list1(rank:2)
=================================================
Progress: 20


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (Cons (string2) (mk_rhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- rhs_lemma4 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- lhs_lemma2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 21


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- lhs_lemma2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1)) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 22


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check (lambda2) (mk_rhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 23


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (mk_lhs1 (Cons (string2) (string_list1)) (string1))

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 24


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
string2 : string
lambda2 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = P (string2) (lambda2)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1))) = sub_check_ta1 (lambda2) (Cons (string2) (mk_lhs1 (string_list1) (string1)))

1 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string1)) = sub_check (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
Deduplication: 5
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 25


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), sub_check_ta1 (C (lambda2) (lambda3)) (mk_lhs1 (string_list1) (string1)) = sub_check (C (lambda2) (lambda3)) (mk_rhs1 (string_list1) (string1))

0 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 6
induction string_list1(rank:0)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 26


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
=================================================
Progress: 27


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
intro string1(rank:1)
=================================================
Progress: 28


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
induction string_list1(rank:0)
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 1(rank:2)
=================================================
Progress: 29


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 1(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 30


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
rewrite IH2 in goal at 0(rank:2)
rewrite IH2 in goal at 1(rank:2)
=================================================
Progress: 31


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
induction string_list1(rank:0)
intro string1(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 32


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
rewrite IH1 in goal at 0(rank:1)
=================================================
Progress: 33


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string1:string), if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
intro string1(rank:1)
rewrite <- IH2 in goal at 0(rank:2)
rewrite <- lhs_lemma1 in goal at 1(rank:2)
rewrite <- IH2 in goal at 1(rank:2)
=================================================
Progress: 34


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
induction string_list1(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 35


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
forall (string_list1:string list), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check (lambda3) (mk_rhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
simpl in goal(rank:0)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH2 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
=================================================
Progress: 36


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (Nil) (string1)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
string_list1 : string list
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
string1 : string
---------------------------------------
if sub_check_ta1 (lambda2) (Cons (string1) (Nil)) then sub_check_ta1 (lambda3) (mk_lhs1 (Nil) (string1)) else false = if sub_check (lambda2) (Cons (string1) (Nil)) then sub_check (lambda3) (mk_rhs1 (Nil) (string1)) else false

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 4
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:1)
case sub_check_ta1 (lambda2) (Cons (string1) (Nil))(rank:2)
case sub_check (lambda2) (Cons (string1) (Nil))(rank:2)
=================================================
Progress: 37


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check (lambda2) (mk_rhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 38


1st goal of : forall (lambda1:lambda) (string_list1:string list) (string1:string), sub_check_ta1 (lambda1) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda1) (mk_rhs1 (string_list1) (string1))
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda2) (mk_rhs1 (string_list1) (string1))
IH2 : forall (string_list1:string list) (string1:string), sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) = sub_check (lambda3) (mk_rhs1 (string_list1) (string1))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
forall (string_list1:string list) (string1:string), if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false = if sub_check_ta1 (lambda2) (mk_lhs1 (string_list1) (string1)) then sub_check_ta1 (lambda3) (mk_lhs1 (string_list1) (string1)) else false

0 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 40
Tactic List : 1
rewrite <- lhs_lemma1 in goal at 1(rank:2)
=================================================
Progress: 39


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lhs_lemma1 in goal at 1(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- rhs_lemma3 in goal at 0(rank:1)
rewrite lemma5 in goal at 0(rank:1)
=================================================
Progress: 40


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- rhs_lemma3 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (mk_rhs1 (Nil) (string1))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
rewrite <- lemma5 in goal at 0(rank:1)
rewrite lemma5 in goal at 0(rank:1)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma5 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_rhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_rhs1 (Nil) (string1)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Deduplication: 2
Tactic List : 2
simpl in goal(rank:0)
rewrite <- rhs_lemma3 in goal at 0(rank:2)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check_ta1 (lambda2) (Nil)(rank:2)
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- rhs_lemma3 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (mk_rhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite <- lemma5 in goal at 0(rank:2)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH2 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check (lambda2) (Nil)(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (mk_rhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lemma5 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
sub_check_ta1 (C (lambda2) (lambda3)) (Nil) = match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check_ta1 (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check (lambda2) (Nil)(rank:2)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite <- IH2 in goal at 0(rank:1)
rewrite IH1 in goal at 0(rank:2)
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH2 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
rewrite <- IH1 in goal at 0(rank:1)
rewrite IH2 in goal at 0(rank:2)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check (lambda2) (Nil) = true
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then sub_check_ta1 (lambda3) (Nil) else false = sub_check (lambda3) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 2
case sub_check_ta1 (lambda2) (Nil)(rank:2)
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite <- lhs_lemma1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 3
case sub_check_ta1 (lambda2) (Nil)(rank:2)
case sub_check (lambda2) (Nil)(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 4
case sub_check (lambda2) (Nil)(rank:2)
case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank:2)
rewrite <- lhs_lemma1 in goal at 1(rank:2)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) then sub_check_ta1 (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) (Nil)(rank:0)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check_ta1 (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
rewrite IH2 in goal at 0(rank:2)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check_ta1 (lambda2) (Nil) then match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
>>> case sub_check_ta1 (lambda2) (Nil)(rank : 2)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
case sub_check (lambda2) (Nil)(rank:0)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

1 goal(s) more...

0 conjecture(s) more...
>>> case sub_check (lambda2) (Nil)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
*******************************************
candidates
induction lambda1(rank:0)
>>> induction lambda1


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
match (V (string1)) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
match (P (string1) (lambda2)) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
match (C (lambda2) (lambda3)) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (C (lambda2) (lambda3)) (Nil)

0 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda2) (Nil)
IH2 : match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)
Inductive1 : lambda1 = C (lambda2) (lambda3)
---------------------------------------
if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false = if sub_check (lambda2) (Nil) then sub_check (lambda3) (Nil) else false

0 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


No conjecture
tactics
assert forall (lambda1:lambda), match (lambda1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda1) (Nil)
induction lambda1
simpl in goal
reflexivity
simpl in goal
reflexivity
simpl in goal
reflexivity
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : -1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = true
---------------------------------------
sub_check (lambda3) (Nil) = sub_check (lambda3) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = false
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = false

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 4
rewrite lemma6 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 2(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = false
---------------------------------------
match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil)) = false

1 goal(s) more...

0 conjecture(s) more...
>>> rewrite lemma6 in goal at 0(rank : 1)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
lambda2 : lambda
lambda3 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
IH2 : sub_check_ta1 (lambda3) (Nil) = match (lambda3) with
| V x -> false
| P x e -> sub_check (e) (Cons (x) (Nil))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))
Inductive1 : lambda1 = C (lambda2) (lambda3)
Case1 : sub_check_ta1 (lambda2) (Nil) = true
Case2 : sub_check (lambda2) (Nil) = false
---------------------------------------
sub_check (lambda3) (Nil) = false

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
*******************************************
candidates
induction lambda1(rank:0)
rewrite <- lemma6 in goal at 0(rank:2)
>>> induction lambda1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
---------------------------------------
sub_check (V (string1)) (Nil) = false

2 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- lemma6 in goal at 0(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
candidates
reflexivity(rank:0)
>>> reflexivity


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (P (string1) (lambda2)) (Nil) = false

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 0(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = false

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- IH1 in goal at 0(rank:1)
rewrite <- lhs_lemma1 in goal at 0(rank:2)
>>> rewrite <- IH1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Nil)

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = sub_check (lambda2) (Nil)

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
simpl in goal(rank:0)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
>>> simpl in goal


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lemma6 in goal at 1


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (Cons (string1) (Nil)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
candidates
rewrite <- lhs_lemma1 in goal at 0(rank:1)
rewrite <- lemma6 in goal at 1(rank:2)
rewrite <- lemma6 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
>>> rewrite <- lhs_lemma1 in goal at 0


1st goal of : forall (lambda1:lambda), sub_check (lambda1) (Nil) = false
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check (lambda2) (Nil) = false
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check (lambda2) (mk_lhs1 (Nil) (string1)) = match (lambda2) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (match (e1) with
| V x -> false
| P x e -> sub_check (e) (mk_lhs1 (Nil) (x))
| C e1 e2 -> && (sub_check (e1) (Nil)) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))) (sub_check (e2) (Nil))

1 goal(s) more...

0 conjecture(s) more...
