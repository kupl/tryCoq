Choose the proof type :
1) Interactive Mode 	 2) Auto Mode
Enter the goal : =================================================
Progress: 1


No conjecture
>>> assert forall (l:lambda), check_ta1 (l) = check (l)(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 2


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

0 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 3


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)

---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Nil) = sub_check (lambda1) (Nil)

0 goal(s) more...

0 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 4


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (Nil) = sub_check (V (string1)) (Nil)

2 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 5


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
false = false

2 goal(s) more...

0 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 6


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

1 goal(s) more...

0 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda), sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))

0 goal(s) more...

0 conjecture(s) more...


1st goal of : any
lambda1 : lambda
string1 : string
lambda2 : lambda
string2 : string
---------------------------------------
forall (lambda3:lambda), sub_check_ta1 (lambda3) (Cons (string2) (Cons (string1) (Nil))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (lambda3) (Cons (string1) (Nil)) else sub_check (lambda3) (Cons (string2) (Cons (string1) (Nil)))

0 goal(s) more...

0 conjecture(s) more...
state_list
sub_check_ta1 (lambda2) (Cons (string1) (Nil)) = sub_check (lambda2) (Cons (string1) (Nil))
sub_check_ta1 (lambda3) (Cons (string2) (Cons (string1) (Nil))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (lambda3) (Cons (string1) (Nil)) else sub_check (lambda3) (Cons (string2) (Cons (string1) (Nil)))
sub_check_ta1 (lambda4) (Cons (string3) (Cons (string2) (Cons (string1) (Nil)))) = if if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil) then sub_check (P (string3) (lambda4)) (Cons (string1) (Nil)) else sub_check (P (string3) (lambda4)) (Cons (string2) (Cons (string1) (Nil)))
lhs_common_subtree
Cons(string1, Nil())
Cons(string2, Cons(string1, Nil()))
Cons(string3, Cons(string2, Cons(string1, Nil())))
rhs_common_subtree
New Env

;;
Lemma List
forall (arg1:string list) (lambda2:lambda), sub_check_ta1 (lambda2) (arg1) = sub_check (lambda2) (arg1)
End of Lemma List
=================================================
Progress: 7


1st goal of : forall (lambda1:lambda), check_ta1 (lambda1) = check (lambda1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (Nil) = sub_check (lambda2) (Nil)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (Nil) = sub_check (P (string1) (lambda2)) (Nil)

1 goal(s) more...

0 conjecture(s) more...
>>> assert forall (arg1:string list) (lambda2:lambda), sub_check_ta1 (lambda2) (arg1) = sub_check (lambda2) (arg1)(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 8


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 9


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 10


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 11


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

3 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 12


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
false = false

3 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 13


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 14


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

---------------------------------------
forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 15


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)

0 goal(s) more...

1 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 16


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
state_list
New Env

;;
Lemma List
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
End of Lemma List
=================================================
Progress: 17


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> assert forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 18


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 19


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), false = false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 20


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), false = false

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 21


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
intro string1(rank:1)
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
=================================================
Progress: 22


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 23


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 2
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 24


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
intro string_list1(rank:1)
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
rewrite IH1 in goal at 0(rank:2)
=================================================
Progress: 25


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 5
rewrite IH1 in goal at 0(rank:2)
rewrite <- IH1 in goal at 1(rank:2)
rewrite <- IH1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
rewrite <- IH1 in goal at 0(rank:2)
=================================================
Progress: 26


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 27


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

0 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 28


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
is_mem_ta1 (Nil) (string1) = mem (string1) (Nil)

1 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
false = false

1 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 29


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
false = false

1 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 30


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
is_mem_ta1 (Cons (string2) (string_list2)) (string1) = mem (string1) (Cons (string2) (string_list2))

0 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string1 : string
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 31


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
string1 : string
---------------------------------------
if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite IH1 in goal at 0(rank:1)
rewrite <- IH1 in goal at 0(rank:1)
case match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 32


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string1) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 33


1st goal of : forall (string1:string) (string_list1:string list), is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)
string_list1 : string list
string2 : string
string_list2 : string list
IH1 : forall (string1:string), is_mem_ta1 (string_list2) (string1) = mem (string1) (string_list2)
Inductive1 : string_list1 = Cons (string2) (string_list2)
---------------------------------------
forall (string1:string), if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = if match (string2, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)

0 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Deduplication: 7
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 34


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
sub_check_ta1 (V (string1)) (string_list1) = sub_check (V (string1)) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 2
rewrite lemma2 in goal at 0(rank:1)
rewrite <- lemma2 in goal at 0(rank:1)
=================================================
Progress: 35


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
is_mem_ta1 (string_list1) (string1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> rewrite lemma2 in goal at 0(rank : 1)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
mem (string1) (string_list1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 36


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
Base1 : lambda1 = V (string1)
---------------------------------------
mem (string1) (string_list1) = mem (string1) (string_list1)

2 goal(s) more...

1 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
Deduplication: 1
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 37


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (P (string1) (lambda2)) (string_list1) = sub_check (P (string1) (lambda2)) (string_list1)

1 goal(s) more...

1 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
string_list1 : string list
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 3
rewrite <- IH1 in goal at 0(rank:2)
rewrite <- lemma2 in goal at 0(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 38


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 1
rewrite <- IH1 in goal at 2(rank:2)
=================================================
Progress: 39


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 0


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 40


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 41


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 42


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 43


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 44


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 45


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 46


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 47


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 48


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 49


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 50


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 51


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 52


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 53


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 54


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 55


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 56


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 57


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 58


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 59


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 60


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 61


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 62


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
rewrite string_eqb_eq in Case2 at 0
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
reflexivity


1st goal of : any
string1 : string
lambda1 : lambda
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)
End of Lemma List
=================================================
Progress: 63


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string2:string) (string_list2:string list), true = is_mem_ta1 (string_list2) (string2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 64


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 65


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 66


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 67


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 68


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 69


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 70


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 71


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 72


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 73


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 74


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 75


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 76


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 77


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 78


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 79


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 80


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 81


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 82


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 83


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 84


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 85


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 86


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 87


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 88


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 89


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 90


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 91


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 92


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 93


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 94


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 95


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 96


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 97


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 98


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 99


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 100


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 101


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 102


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 103


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 104


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 105


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 106


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 107


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 108


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case mem (string1) (string_list1)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
rewrite string_eqb_eq in Case2 at 0
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)
End of Lemma List
=================================================
Progress: 109


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 110


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string2:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 111


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 112


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 113


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 114


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 115


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
state_list
=================================================
Progress: 116


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 117


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 118


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = is_mem_ta1 (Nil) (string1)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 119


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 120


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = is_mem_ta1 (string_list1) (string1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 121


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 1(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 1


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 122


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 123


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 124


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 125


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 126


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 127


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 128


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 129


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 130


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 131


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 132


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 133


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 134


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 135


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 136


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 137


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 138


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 139


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 140


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 141


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 142


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 143


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 144


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 145


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 146


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 147


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 148


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 149


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 150


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 151


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 152


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 153


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 154


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 155


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 156


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check_ta1 (V (string2)) (Nil) else sub_check (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 157


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 158


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 159


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 160


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 161


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 162


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 163


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 164


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 165


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 166


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 167


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 168


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 169


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 170


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 171


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 172


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 173


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 174


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check_ta1 (V (string2)) (string_list1) else sub_check (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 175


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = is_mem_ta1 (string_list1) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 176


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 177


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string2 = string1
---------------------------------------
true = is_mem_ta1 (string_list1) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 178


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 179


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (Nil)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 180


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

4 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 181


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
false = false

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 182


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 183


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 184


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 185


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 186


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 187


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 188


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 189


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (Cons (string3) (string_list2)) else sub_check (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 190


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 191


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 192


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 193


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 194


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 195


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check_ta1 (lambda1) (string_list1) else sub_check (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check_ta1 (V (string2)) (string_list2) else sub_check (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = is_mem_ta1 (string_list2) (string2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 196


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite <- IH1 in goal at 2(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
rewrite IH1 in goal at 0
reflexivity
simpl in goal
rewrite <- IH1 in goal at 2


1st goal of : any
lambda1 : lambda
string1 : string
---------------------------------------
forall (lambda2:lambda) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))
End of Lemma List
=================================================
Progress: 197


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> assert forall (lambda2:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check_ta1 (lambda2) (Cons (string1) (string_list1))(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
induction lambda1(rank:0)
intro string1(rank:1)
intro string_list1(rank:1)
=================================================
Progress: 198


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 199


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 200


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 201


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 202


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 203


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 204


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
induction lambda1(rank:0)
intro string_list1(rank:1)
=================================================
Progress: 205


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 206


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 207


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 208


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 209


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 210


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 211


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 212


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 213


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 214


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 215


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 216


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 217


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 218


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 219


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
previous tactics
simpl in goal
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
rewrite string_eqb_eq in Case2 at 0
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
reflexivity


1st goal of : any
string1 : string
lambda1 : lambda
string2 : string
string_list1 : string list
string3 : string
---------------------------------------
forall (string_list2:string list), true = mem (string2) (string_list2)

0 goal(s) more...

0 conjecture(s) more...
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list2:string list), true = mem (string2) (string_list2)
End of Lemma List
=================================================
Progress: 220


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string2:string) (string_list2:string list), true = mem (string2) (string_list2)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 221


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 222


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 223


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

---------------------------------------
forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 224


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
---------------------------------------
forall (lambda1:lambda) (string1:string), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 225


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 226


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
---------------------------------------
forall (lambda1:lambda) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> intro string_list1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction lambda1(rank:0)
=================================================
Progress: 227


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
---------------------------------------
forall (lambda1:lambda), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))

0 goal(s) more...

2 conjecture(s) more...
>>> induction lambda1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 228


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
sub_check_ta1 (V (string2)) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 229


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 230


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 231


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string1 : string
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 232


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string) (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 233


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
forall (string_list1:string list), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 234


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if mem (string1) (Nil) then sub_check (V (string2)) (Nil) else sub_check_ta1 (V (string2)) (Cons (string1) (Nil))

3 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 235


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
Base2 : string_list1 = Nil
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2) = if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Nil) (string2)

3 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 236


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if mem (string1) (Cons (string3) (string_list2)) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
=================================================
Progress: 237


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 238


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 239


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 240


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 241


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 242


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 243


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 244


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 245


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 246


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 247


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 248


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 249


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 250


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 251


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 5
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 2(rank:2)
rewrite Case1 in goal at 3(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
rewrite Case1 in goal at 1(rank:2)
=================================================
Progress: 252


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) then sub_check (V (string2)) (Cons (string3) (string_list2)) else sub_check_ta1 (V (string2)) (Cons (string1) (Cons (string3) (string_list2)))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2)(rank:2)
=================================================
Progress: 253


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 254


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string1
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 255


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string3 = string2
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite Case2 in goal at 0(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 256


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string2 = string3
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (Cons (string3) (string_list2)) (string2) = true

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case2 in goal at 0(rank:2)
rewrite Case2 in goal at 1(rank:2)
rewrite Case2 in goal at 2(rank:2)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:2)
=================================================
Progress: 257


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
---------------------------------------
true = if match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
>>> case match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
reflexivity(rank:0)
=================================================
Progress: 258


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = true

5 goal(s) more...

2 conjecture(s) more...
>>> reflexivity(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string_list1 : string list
string3 : string
string_list2 : string list
IH1 : forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list2) (string2) = if mem (string1) (string_list2) then sub_check (V (string2)) (string_list2) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list2))
Inductive1 : string_list1 = Cons (string3) (string_list2)
string1 : string
Case1 : if match (string3, string1) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else mem (string1) (string_list2) = true
Case2 : string1 = string2
Case3 : match (string3, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = false
---------------------------------------
true = mem (string2) (string_list2)

4 goal(s) more...

2 conjecture(s) more...
Deduplication: 0
Tactic List : 0
=================================================
Progress: 259


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
---------------------------------------
forall (string1:string), if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
case mem (string1) (string_list1)(rank:0)
=================================================
Progress: 260


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 3
rewrite string_eqb_eq in Case1 at 0(rank:0)
rewrite <- string_eqb_eq in Case1 at 0(rank:0)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 261


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

2 goal(s) more...

2 conjecture(s) more...
>>> case mem (string1) (string_list1)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank:0)
=================================================
Progress: 262


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string1 = string2
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 263


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case1 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : string2 = string1
---------------------------------------
true = if mem (string1) (string_list1) then sub_check (V (string2)) (string_list1) else sub_check_ta1 (V (string2)) (Cons (string1) (string_list1))

3 goal(s) more...

2 conjecture(s) more...
Tactic List : 4
rewrite Case1 in goal at 0(rank:2)
rewrite Case1 in goal at 1(rank:2)
rewrite Case1 in goal at 2(rank:2)
case mem (string1) (string_list1)(rank:2)
=================================================
Progress: 264


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
---------------------------------------
if match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) then true else is_mem_ta1 (string_list1) (string2) = mem (string2) (string_list1)

3 goal(s) more...

2 conjecture(s) more...
>>> case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 2
rewrite string_eqb_eq in Case2 at 0(rank:0)
rewrite <- string_eqb_eq in Case2 at 0(rank:0)
=================================================
Progress: 265


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string1 = string2
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 0
previous tactics
simpl in goal
intro string1
case mem (string1) (string_list1)
case match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2)
rewrite string_eqb_eq in Case2 at 0
state_list
New Env

;;
Lemma List
forall (string2:string) (string_list1:string list), true = mem (string2) (string_list1)
End of Lemma List
=================================================
Progress: 266


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
>>> rewrite <- string_eqb_eq in Case2 at 0(rank : 0)


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : string2 = string1
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
Tactic List : 1
rewrite Case2 in goal at 0(rank:2)
=================================================
Progress: 267


1st goal of : forall (lambda1:lambda) (string1:string) (string_list1:string list), sub_check_ta1 (lambda1) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda1) (string_list1) else sub_check_ta1 (lambda1) (Cons (string1) (string_list1))
string_list1 : string list
lambda1 : lambda
string2 : string
Base1 : lambda1 = V (string2)
string1 : string
Case1 : mem (string1) (string_list1) = true
Case2 : match (string1, string2) with
| (String l1, String l2) -> list_eq (l1) (l2) = true
---------------------------------------
true = mem (string2) (string_list1)

4 goal(s) more...

2 conjecture(s) more...
>>> assert forall (string2:string) (string_list1:string list), true = mem (string2) (string_list1)(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 2
induction string_list1(rank:0)
intro string1(rank:1)
=================================================
Progress: 268


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 269


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
intro string1(rank:1)
=================================================
Progress: 270


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 271


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 272


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 273


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

---------------------------------------
forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
induction string_list1(rank:0)
=================================================
Progress: 274


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
---------------------------------------
forall (string_list1:string list), true = mem (string1) (string_list1)

0 goal(s) more...

3 conjecture(s) more...
>>> induction string_list1(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 1
simpl in goal(rank:0)
=================================================
Progress: 275


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = mem (string1) (Nil)

1 goal(s) more...

3 conjecture(s) more...
>>> simpl in goal(rank : 0)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string1 : string
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 276


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 277


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
---------------------------------------
forall (string1:string), true = false

1 goal(s) more...

3 conjecture(s) more...
>>> intro string1(rank : 1)


1st goal of : forall (string1:string) (string_list1:string list), true = mem (string1) (string_list1)
string_list1 : string list
Base1 : string_list1 = Nil
string1 : string
---------------------------------------
true = false

1 goal(s) more...

3 conjecture(s) more...
Tactic List : 0
=================================================
Progress: 278


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check_ta1 (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
>>> rewrite IH1 in goal at 0(rank : 2)


1st goal of : forall (string_list1:string list) (lambda1:lambda), sub_check_ta1 (lambda1) (string_list1) = sub_check (lambda1) (string_list1)
lambda1 : lambda
string1 : string
lambda2 : lambda
IH1 : forall (string_list1:string list), sub_check_ta1 (lambda2) (string_list1) = sub_check (lambda2) (string_list1)
Inductive1 : lambda1 = P (string1) (lambda2)
string_list1 : string list
---------------------------------------
sub_check (lambda2) (Cons (string1) (string_list1)) = if mem (string1) (string_list1) then sub_check (lambda2) (string_list1) else sub_check (lambda2) (Cons (string1) (string_list1))

1 goal(s) more...

1 conjecture(s) more...
